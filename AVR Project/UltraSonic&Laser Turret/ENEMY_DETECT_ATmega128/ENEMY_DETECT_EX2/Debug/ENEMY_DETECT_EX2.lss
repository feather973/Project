
ENEMY_DETECT_EX2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000336  00800100  00800100  00001204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b5  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  00002841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a65  00000000  00000000  000035bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00004024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f51  00000000  00000000  000049a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000058f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
       2:	00 00       	nop
       4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
      32:	00 00       	nop
      34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
      36:	00 00       	nop
      38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__vector_18>
      4a:	00 00       	nop
      4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
      62:	00 00       	nop
      64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
      66:	00 00       	nop
      68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
      76:	00 00       	nop
      78:	32 c0       	rjmp	.+100    	; 0xde <__vector_30>
      7a:	00 00       	nop
      7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e1       	ldi	r29, 0x10	; 16
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
      c6:	24 e0       	ldi	r18, 0x04	; 4
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 33       	cpi	r26, 0x36	; 54
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	bd d4       	rcall	.+2426   	; 0xa52 <main>
      d8:	0c 94 c6 08 	jmp	0x118c	; 0x118c <_exit>

000000dc <__bad_interrupt>:
      dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <__vector_30>:
	return true;
}

// true : motor could move
// false : motor could not move
bool possible(double x){ if(x>=0&&x<=180) return true; else return false;}
      de:	1f 92       	push	r1
      e0:	0f 92       	push	r0
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	0f 92       	push	r0
      e6:	11 24       	eor	r1, r1
      e8:	0b b6       	in	r0, 0x3b	; 59
      ea:	0f 92       	push	r0
      ec:	2f 93       	push	r18
      ee:	3f 93       	push	r19
      f0:	4f 93       	push	r20
      f2:	5f 93       	push	r21
      f4:	6f 93       	push	r22
      f6:	7f 93       	push	r23
      f8:	8f 93       	push	r24
      fa:	9f 93       	push	r25
      fc:	af 93       	push	r26
      fe:	bf 93       	push	r27
     100:	ef 93       	push	r30
     102:	ff 93       	push	r31
     104:	10 d5       	rcall	.+2592   	; 0xb26 <UART1_ISR_Receive>
     106:	ff 91       	pop	r31
     108:	ef 91       	pop	r30
     10a:	bf 91       	pop	r27
     10c:	af 91       	pop	r26
     10e:	9f 91       	pop	r25
     110:	8f 91       	pop	r24
     112:	7f 91       	pop	r23
     114:	6f 91       	pop	r22
     116:	5f 91       	pop	r21
     118:	4f 91       	pop	r20
     11a:	3f 91       	pop	r19
     11c:	2f 91       	pop	r18
     11e:	0f 90       	pop	r0
     120:	0b be       	out	0x3b, r0	; 59
     122:	0f 90       	pop	r0
     124:	0f be       	out	0x3f, r0	; 63
     126:	0f 90       	pop	r0
     128:	1f 90       	pop	r1
     12a:	18 95       	reti

0000012c <__vector_18>:
     12c:	1f 92       	push	r1
     12e:	0f 92       	push	r0
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	0f 92       	push	r0
     134:	11 24       	eor	r1, r1
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	2f 93       	push	r18
     13c:	3f 93       	push	r19
     13e:	4f 93       	push	r20
     140:	5f 93       	push	r21
     142:	6f 93       	push	r22
     144:	7f 93       	push	r23
     146:	8f 93       	push	r24
     148:	9f 93       	push	r25
     14a:	af 93       	push	r26
     14c:	bf 93       	push	r27
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
     152:	ae d4       	rcall	.+2396   	; 0xab0 <UART0_ISR_Receive>
     154:	ff 91       	pop	r31
     156:	ef 91       	pop	r30
     158:	bf 91       	pop	r27
     15a:	af 91       	pop	r26
     15c:	9f 91       	pop	r25
     15e:	8f 91       	pop	r24
     160:	7f 91       	pop	r23
     162:	6f 91       	pop	r22
     164:	5f 91       	pop	r21
     166:	4f 91       	pop	r20
     168:	3f 91       	pop	r19
     16a:	2f 91       	pop	r18
     16c:	0f 90       	pop	r0
     16e:	0b be       	out	0x3b, r0	; 59
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <InitilaizerTimer>:
     17a:	8f b5       	in	r24, 0x2f	; 47
     17c:	82 60       	ori	r24, 0x02	; 2
     17e:	8f bd       	out	0x2f, r24	; 47
     180:	8e b5       	in	r24, 0x2e	; 46
     182:	88 61       	ori	r24, 0x18	; 24
     184:	8e bd       	out	0x2e, r24	; 46
     186:	8f b5       	in	r24, 0x2f	; 47
     188:	80 6a       	ori	r24, 0xA0	; 160
     18a:	8f bd       	out	0x2f, r24	; 47
     18c:	8e b5       	in	r24, 0x2e	; 46
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	8e bd       	out	0x2e, r24	; 46
     192:	2f e3       	ldi	r18, 0x3F	; 63
     194:	3c e9       	ldi	r19, 0x9C	; 156
     196:	37 bd       	out	0x27, r19	; 39
     198:	26 bd       	out	0x26, r18	; 38
     19a:	ab e8       	ldi	r26, 0x8B	; 139
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	8c 91       	ld	r24, X
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	8c 93       	st	X, r24
     1a4:	ea e8       	ldi	r30, 0x8A	; 138
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 61       	ori	r24, 0x18	; 24
     1ac:	80 83       	st	Z, r24
     1ae:	8c 91       	ld	r24, X
     1b0:	80 6a       	ori	r24, 0xA0	; 160
     1b2:	8c 93       	st	X, r24
     1b4:	80 81       	ld	r24, Z
     1b6:	82 60       	ori	r24, 0x02	; 2
     1b8:	80 83       	st	Z, r24
     1ba:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1be:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1c2:	80 e6       	ldi	r24, 0x60	; 96
     1c4:	87 bb       	out	0x17, r24	; 23
     1c6:	88 e1       	ldi	r24, 0x18	; 24
     1c8:	82 b9       	out	0x02, r24	; 2
     1ca:	08 95       	ret

000001cc <cmdParse>:
     1cc:	6f 92       	push	r6
     1ce:	7f 92       	push	r7
     1d0:	8f 92       	push	r8
     1d2:	9f 92       	push	r9
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	28 97       	sbiw	r28, 0x08	; 8
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	19 82       	std	Y+1, r1	; 0x01
     1fa:	1a 82       	std	Y+2, r1	; 0x02
     1fc:	1b 82       	std	Y+3, r1	; 0x03
     1fe:	1c 82       	std	Y+4, r1	; 0x04
     200:	1d 82       	std	Y+5, r1	; 0x05
     202:	1e 82       	std	Y+6, r1	; 0x06
     204:	1f 82       	std	Y+7, r1	; 0x07
     206:	18 86       	std	Y+8, r1	; 0x08
     208:	fc 01       	movw	r30, r24
     20a:	20 81       	ld	r18, Z
     20c:	23 35       	cpi	r18, 0x53	; 83
     20e:	09 f0       	breq	.+2      	; 0x212 <cmdParse+0x46>
     210:	7d c0       	rjmp	.+250    	; 0x30c <cmdParse+0x140>
     212:	23 81       	ldd	r18, Z+3	; 0x03
     214:	28 37       	cpi	r18, 0x78	; 120
     216:	09 f0       	breq	.+2      	; 0x21a <cmdParse+0x4e>
     218:	7c c0       	rjmp	.+248    	; 0x312 <cmdParse+0x146>
     21a:	3c 01       	movw	r6, r24
     21c:	8c 01       	movw	r16, r24
     21e:	0f 2e       	mov	r0, r31
     220:	fa e2       	ldi	r31, 0x2A	; 42
     222:	ef 2e       	mov	r14, r31
     224:	f4 e0       	ldi	r31, 0x04	; 4
     226:	ff 2e       	mov	r15, r31
     228:	f0 2d       	mov	r31, r0
     22a:	0f 2e       	mov	r0, r31
     22c:	f0 e3       	ldi	r31, 0x30	; 48
     22e:	8f 2e       	mov	r8, r31
     230:	f4 e0       	ldi	r31, 0x04	; 4
     232:	9f 2e       	mov	r9, r31
     234:	f0 2d       	mov	r31, r0
     236:	0a c0       	rjmp	.+20     	; 0x24c <cmdParse+0x80>
     238:	06 5f       	subi	r16, 0xF6	; 246
     23a:	1f 4f       	sbci	r17, 0xFF	; 255
     23c:	f6 e0       	ldi	r31, 0x06	; 6
     23e:	ef 0e       	add	r14, r31
     240:	f1 1c       	adc	r15, r1
     242:	f5 01       	movw	r30, r10
     244:	85 85       	ldd	r24, Z+13	; 0x0d
     246:	88 37       	cpi	r24, 0x78	; 120
     248:	09 f0       	breq	.+2      	; 0x24c <cmdParse+0x80>
     24a:	66 c0       	rjmp	.+204    	; 0x318 <cmdParse+0x14c>
     24c:	f8 01       	movw	r30, r16
     24e:	84 81       	ldd	r24, Z+4	; 0x04
     250:	95 81       	ldd	r25, Z+5	; 0x05
     252:	9a 83       	std	Y+2, r25	; 0x02
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	86 81       	ldd	r24, Z+6	; 0x06
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	ce 01       	movw	r24, r28
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	71 d7       	rcall	.+3810   	; 0x1142 <atoi>
     260:	6c 01       	movw	r12, r24
     262:	58 01       	movw	r10, r16
     264:	f8 01       	movw	r30, r16
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	89 37       	cpi	r24, 0x79	; 121
     26a:	09 f0       	breq	.+2      	; 0x26e <cmdParse+0xa2>
     26c:	58 c0       	rjmp	.+176    	; 0x31e <cmdParse+0x152>
     26e:	80 85       	ldd	r24, Z+8	; 0x08
     270:	91 85       	ldd	r25, Z+9	; 0x09
     272:	9e 83       	std	Y+6, r25	; 0x06
     274:	8d 83       	std	Y+5, r24	; 0x05
     276:	82 85       	ldd	r24, Z+10	; 0x0a
     278:	8f 83       	std	Y+7, r24	; 0x07
     27a:	ce 01       	movw	r24, r28
     27c:	05 96       	adiw	r24, 0x05	; 5
     27e:	61 d7       	rcall	.+3778   	; 0x1142 <atoi>
     280:	f8 01       	movw	r30, r16
     282:	21 81       	ldd	r18, Z+1	; 0x01
     284:	25 36       	cpi	r18, 0x65	; 101
     286:	09 f0       	breq	.+2      	; 0x28a <cmdParse+0xbe>
     288:	4d c0       	rjmp	.+154    	; 0x324 <cmdParse+0x158>
     28a:	22 81       	ldd	r18, Z+2	; 0x02
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	20 53       	subi	r18, 0x30	; 48
     290:	31 09       	sbc	r19, r1
     292:	22 30       	cpi	r18, 0x02	; 2
     294:	31 05       	cpc	r19, r1
     296:	a9 f0       	breq	.+42     	; 0x2c2 <cmdParse+0xf6>
     298:	24 f4       	brge	.+8      	; 0x2a2 <cmdParse+0xd6>
     29a:	21 15       	cp	r18, r1
     29c:	31 05       	cpc	r19, r1
     29e:	41 f0       	breq	.+16     	; 0x2b0 <cmdParse+0xe4>
     2a0:	1e c0       	rjmp	.+60     	; 0x2de <cmdParse+0x112>
     2a2:	23 30       	cpi	r18, 0x03	; 3
     2a4:	31 05       	cpc	r19, r1
     2a6:	89 f0       	breq	.+34     	; 0x2ca <cmdParse+0xfe>
     2a8:	24 30       	cpi	r18, 0x04	; 4
     2aa:	31 05       	cpc	r19, r1
     2ac:	a9 f0       	breq	.+42     	; 0x2d8 <cmdParse+0x10c>
     2ae:	17 c0       	rjmp	.+46     	; 0x2de <cmdParse+0x112>
     2b0:	88 ee       	ldi	r24, 0xE8	; 232
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	0f 2e       	mov	r0, r31
     2b6:	f8 ee       	ldi	r31, 0xE8	; 232
     2b8:	cf 2e       	mov	r12, r31
     2ba:	f3 e0       	ldi	r31, 0x03	; 3
     2bc:	df 2e       	mov	r13, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	0e c0       	rjmp	.+28     	; 0x2de <cmdParse+0x112>
     2c2:	d1 94       	neg	r13
     2c4:	c1 94       	neg	r12
     2c6:	d1 08       	sbc	r13, r1
     2c8:	0a c0       	rjmp	.+20     	; 0x2de <cmdParse+0x112>
     2ca:	d1 94       	neg	r13
     2cc:	c1 94       	neg	r12
     2ce:	d1 08       	sbc	r13, r1
     2d0:	91 95       	neg	r25
     2d2:	81 95       	neg	r24
     2d4:	91 09       	sbc	r25, r1
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <cmdParse+0x112>
     2d8:	91 95       	neg	r25
     2da:	81 95       	neg	r24
     2dc:	91 09       	sbc	r25, r1
     2de:	f7 01       	movw	r30, r14
     2e0:	d1 82       	std	Z+1, r13	; 0x01
     2e2:	c0 82       	st	Z, r12
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	e8 14       	cp	r14, r8
     2ee:	f9 04       	cpc	r15, r9
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <cmdParse+0x128>
     2f2:	a2 cf       	rjmp	.-188    	; 0x238 <cmdParse+0x6c>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	f3 01       	movw	r30, r6
     2fa:	25 89       	ldd	r18, Z+21	; 0x15
     2fc:	25 34       	cpi	r18, 0x45	; 69
     2fe:	11 f4       	brne	.+4      	; 0x304 <cmdParse+0x138>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	91 95       	neg	r25
     306:	81 95       	neg	r24
     308:	91 09       	sbc	r25, r1
     30a:	0e c0       	rjmp	.+28     	; 0x328 <cmdParse+0x15c>
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	9f ef       	ldi	r25, 0xFF	; 255
     310:	0b c0       	rjmp	.+22     	; 0x328 <cmdParse+0x15c>
     312:	8f ef       	ldi	r24, 0xFF	; 255
     314:	9f ef       	ldi	r25, 0xFF	; 255
     316:	08 c0       	rjmp	.+16     	; 0x328 <cmdParse+0x15c>
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	9f ef       	ldi	r25, 0xFF	; 255
     31c:	05 c0       	rjmp	.+10     	; 0x328 <cmdParse+0x15c>
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	9f ef       	ldi	r25, 0xFF	; 255
     322:	02 c0       	rjmp	.+4      	; 0x328 <cmdParse+0x15c>
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	9f ef       	ldi	r25, 0xFF	; 255
     328:	28 96       	adiw	r28, 0x08	; 8
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	bf 90       	pop	r11
     346:	af 90       	pop	r10
     348:	9f 90       	pop	r9
     34a:	8f 90       	pop	r8
     34c:	7f 90       	pop	r7
     34e:	6f 90       	pop	r6
     350:	08 95       	ret

00000352 <isInRange>:
     352:	fc 01       	movw	r30, r24
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	e8 0f       	add	r30, r24
     35a:	f9 1f       	adc	r31, r25
     35c:	ee 0f       	add	r30, r30
     35e:	ff 1f       	adc	r31, r31
     360:	e6 5d       	subi	r30, 0xD6	; 214
     362:	fb 4f       	sbci	r31, 0xFB	; 251
     364:	20 81       	ld	r18, Z
     366:	31 81       	ldd	r19, Z+1	; 0x01
     368:	24 38       	cpi	r18, 0x84	; 132
     36a:	33 40       	sbci	r19, 0x03	; 3
     36c:	8c f4       	brge	.+34     	; 0x390 <isInRange+0x3e>
     36e:	fc 01       	movw	r30, r24
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	e8 0f       	add	r30, r24
     376:	f9 1f       	adc	r31, r25
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	e6 5d       	subi	r30, 0xD6	; 214
     37e:	fb 4f       	sbci	r31, 0xFB	; 251
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	22 81       	ldd	r18, Z+2	; 0x02
     384:	33 81       	ldd	r19, Z+3	; 0x03
     386:	24 38       	cpi	r18, 0x84	; 132
     388:	33 40       	sbci	r19, 0x03	; 3
     38a:	1c f0       	brlt	.+6      	; 0x392 <isInRange+0x40>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	08 95       	ret
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret

00000394 <rescale>:

// rescaling angle data to PWM for Servo
// -1 : quadra is 0 -> no enemy
int rescale(int q, int idx, int ang){
	switch(q){
     394:	82 30       	cpi	r24, 0x02	; 2
     396:	91 05       	cpc	r25, r1
     398:	b1 f1       	breq	.+108    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     39a:	1c f4       	brge	.+6      	; 0x3a2 <rescale+0xe>
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	49 f0       	breq	.+18     	; 0x3b2 <rescale+0x1e>
     3a0:	b0 c0       	rjmp	.+352    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     3a2:	83 30       	cpi	r24, 0x03	; 3
     3a4:	91 05       	cpc	r25, r1
     3a6:	09 f4       	brne	.+2      	; 0x3aa <rescale+0x16>
     3a8:	58 c0       	rjmp	.+176    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     3aa:	04 97       	sbiw	r24, 0x04	; 4
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <rescale+0x1c>
     3ae:	7f c0       	rjmp	.+254    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     3b0:	a8 c0       	rjmp	.+336    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case 1:{
			if(idx==0) return (int)((double)(ang/180.0) * (double)(NPULSE_MAX - NPULSE_MIN)) + NPULSE_MIN;
     3b2:	67 2b       	or	r22, r23
     3b4:	a1 f4       	brne	.+40     	; 0x3de <rescale+0x4a>
     3b6:	ba 01       	movw	r22, r20
     3b8:	55 0f       	add	r21, r21
     3ba:	88 0b       	sbc	r24, r24
     3bc:	99 0b       	sbc	r25, r25
     3be:	63 d5       	rcall	.+2758   	; 0xe86 <__floatsisf>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	44 e3       	ldi	r20, 0x34	; 52
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	c3 d4       	rcall	.+2438   	; 0xd50 <__divsf3>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e2       	ldi	r19, 0x20	; 32
     3ce:	48 e7       	ldi	r20, 0x78	; 120
     3d0:	55 e4       	ldi	r21, 0x45	; 69
     3d2:	51 d6       	rcall	.+3234   	; 0x1076 <__mulsf3>
     3d4:	25 d5       	rcall	.+2634   	; 0xe20 <__fixsfsi>
     3d6:	cb 01       	movw	r24, r22
     3d8:	8c 52       	subi	r24, 0x2C	; 44
     3da:	9c 4f       	sbci	r25, 0xFC	; 252
     3dc:	08 95       	ret
			else return (int)((double)(ang/180.0) * (double)(EPULSE_MAX - EPULSE_MIN)) + EPULSE_MIN;
     3de:	ba 01       	movw	r22, r20
     3e0:	55 0f       	add	r21, r21
     3e2:	88 0b       	sbc	r24, r24
     3e4:	99 0b       	sbc	r25, r25
     3e6:	4f d5       	rcall	.+2718   	; 0xe86 <__floatsisf>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	44 e3       	ldi	r20, 0x34	; 52
     3ee:	53 e4       	ldi	r21, 0x43	; 67
     3f0:	af d4       	rcall	.+2398   	; 0xd50 <__divsf3>
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e4       	ldi	r19, 0x40	; 64
     3f6:	4b e7       	ldi	r20, 0x7B	; 123
     3f8:	55 e4       	ldi	r21, 0x45	; 69
     3fa:	3d d6       	rcall	.+3194   	; 0x1076 <__mulsf3>
     3fc:	11 d5       	rcall	.+2594   	; 0xe20 <__fixsfsi>
     3fe:	cb 01       	movw	r24, r22
     400:	8c 52       	subi	r24, 0x2C	; 44
     402:	9c 4f       	sbci	r25, 0xFC	; 252
     404:	08 95       	ret
			break;
		}
		case 2:{
			if(idx==0) return (int)((double)(ang/180.0) * (double)(WPULSE_MAX - WPULSE_MIN)) + WPULSE_MIN;
     406:	67 2b       	or	r22, r23
     408:	a1 f4       	brne	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     40a:	ba 01       	movw	r22, r20
     40c:	55 0f       	add	r21, r21
     40e:	88 0b       	sbc	r24, r24
     410:	99 0b       	sbc	r25, r25
     412:	39 d5       	rcall	.+2674   	; 0xe86 <__floatsisf>
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	44 e3       	ldi	r20, 0x34	; 52
     41a:	53 e4       	ldi	r21, 0x43	; 67
     41c:	99 d4       	rcall	.+2354   	; 0xd50 <__divsf3>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e2       	ldi	r19, 0x20	; 32
     422:	48 e7       	ldi	r20, 0x78	; 120
     424:	55 e4       	ldi	r21, 0x45	; 69
     426:	27 d6       	rcall	.+3150   	; 0x1076 <__mulsf3>
     428:	fb d4       	rcall	.+2550   	; 0xe20 <__fixsfsi>
     42a:	cb 01       	movw	r24, r22
     42c:	8c 52       	subi	r24, 0x2C	; 44
     42e:	9c 4f       	sbci	r25, 0xFC	; 252
     430:	08 95       	ret
			else return (int)((double)(ang/180.0) * (double)(NPULSE_MAX - NPULSE_MIN)) + NPULSE_MIN;
     432:	ba 01       	movw	r22, r20
     434:	55 0f       	add	r21, r21
     436:	88 0b       	sbc	r24, r24
     438:	99 0b       	sbc	r25, r25
     43a:	25 d5       	rcall	.+2634   	; 0xe86 <__floatsisf>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	44 e3       	ldi	r20, 0x34	; 52
     442:	53 e4       	ldi	r21, 0x43	; 67
     444:	85 d4       	rcall	.+2314   	; 0xd50 <__divsf3>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e2       	ldi	r19, 0x20	; 32
     44a:	48 e7       	ldi	r20, 0x78	; 120
     44c:	55 e4       	ldi	r21, 0x45	; 69
     44e:	13 d6       	rcall	.+3110   	; 0x1076 <__mulsf3>
     450:	e7 d4       	rcall	.+2510   	; 0xe20 <__fixsfsi>
     452:	cb 01       	movw	r24, r22
     454:	8c 52       	subi	r24, 0x2C	; 44
     456:	9c 4f       	sbci	r25, 0xFC	; 252
     458:	08 95       	ret
			break;
		}
		case 3:{
			if(idx==0) return (int)((double)(ang/180.0) * (double)(SPULSE_MAX - SPULSE_MIN)) + SPULSE_MIN;
     45a:	67 2b       	or	r22, r23
     45c:	a1 f4       	brne	.+40     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     45e:	ba 01       	movw	r22, r20
     460:	55 0f       	add	r21, r21
     462:	88 0b       	sbc	r24, r24
     464:	99 0b       	sbc	r25, r25
     466:	0f d5       	rcall	.+2590   	; 0xe86 <__floatsisf>
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	44 e3       	ldi	r20, 0x34	; 52
     46e:	53 e4       	ldi	r21, 0x43	; 67
     470:	6f d4       	rcall	.+2270   	; 0xd50 <__divsf3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 ec       	ldi	r19, 0xC0	; 192
     476:	4e e6       	ldi	r20, 0x6E	; 110
     478:	55 e4       	ldi	r21, 0x45	; 69
     47a:	fd d5       	rcall	.+3066   	; 0x1076 <__mulsf3>
     47c:	d1 d4       	rcall	.+2466   	; 0xe20 <__fixsfsi>
     47e:	cb 01       	movw	r24, r22
     480:	8c 52       	subi	r24, 0x2C	; 44
     482:	9c 4f       	sbci	r25, 0xFC	; 252
			else return (int)((double)(ang/180.0) * (double)(WPULSE_MAX - WPULSE_MIN)) + WPULSE_MIN;
     484:	08 95       	ret
     486:	ba 01       	movw	r22, r20
     488:	55 0f       	add	r21, r21
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	fb d4       	rcall	.+2550   	; 0xe86 <__floatsisf>
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	44 e3       	ldi	r20, 0x34	; 52
     496:	53 e4       	ldi	r21, 0x43	; 67
     498:	5b d4       	rcall	.+2230   	; 0xd50 <__divsf3>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e2       	ldi	r19, 0x20	; 32
     49e:	48 e7       	ldi	r20, 0x78	; 120
     4a0:	55 e4       	ldi	r21, 0x45	; 69
     4a2:	e9 d5       	rcall	.+3026   	; 0x1076 <__mulsf3>
     4a4:	bd d4       	rcall	.+2426   	; 0xe20 <__fixsfsi>
     4a6:	cb 01       	movw	r24, r22
     4a8:	8c 52       	subi	r24, 0x2C	; 44
     4aa:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
		}
		case 4:{
			if(idx==0) return (int)((double)(ang/180.0) * (double)(EPULSE_MAX - EPULSE_MIN)) + EPULSE_MIN;
     4ac:	08 95       	ret
     4ae:	67 2b       	or	r22, r23
     4b0:	a1 f4       	brne	.+40     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4b2:	ba 01       	movw	r22, r20
     4b4:	55 0f       	add	r21, r21
     4b6:	88 0b       	sbc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	e5 d4       	rcall	.+2506   	; 0xe86 <__floatsisf>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	44 e3       	ldi	r20, 0x34	; 52
     4c2:	53 e4       	ldi	r21, 0x43	; 67
     4c4:	45 d4       	rcall	.+2186   	; 0xd50 <__divsf3>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e4       	ldi	r19, 0x40	; 64
     4ca:	4b e7       	ldi	r20, 0x7B	; 123
     4cc:	55 e4       	ldi	r21, 0x45	; 69
     4ce:	d3 d5       	rcall	.+2982   	; 0x1076 <__mulsf3>
     4d0:	a7 d4       	rcall	.+2382   	; 0xe20 <__fixsfsi>
     4d2:	cb 01       	movw	r24, r22
     4d4:	8c 52       	subi	r24, 0x2C	; 44
     4d6:	9c 4f       	sbci	r25, 0xFC	; 252
			else return (int)((double)(ang/180.0) * (double)(SPULSE_MAX - SPULSE_MIN)) + SPULSE_MIN;
     4d8:	08 95       	ret
     4da:	ba 01       	movw	r22, r20
     4dc:	55 0f       	add	r21, r21
     4de:	88 0b       	sbc	r24, r24
     4e0:	99 0b       	sbc	r25, r25
     4e2:	d1 d4       	rcall	.+2466   	; 0xe86 <__floatsisf>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	44 e3       	ldi	r20, 0x34	; 52
     4ea:	53 e4       	ldi	r21, 0x43	; 67
     4ec:	31 d4       	rcall	.+2146   	; 0xd50 <__divsf3>
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 ec       	ldi	r19, 0xC0	; 192
     4f2:	4e e6       	ldi	r20, 0x6E	; 110
     4f4:	55 e4       	ldi	r21, 0x45	; 69
     4f6:	bf d5       	rcall	.+2942   	; 0x1076 <__mulsf3>
     4f8:	93 d4       	rcall	.+2342   	; 0xe20 <__fixsfsi>
     4fa:	cb 01       	movw	r24, r22
     4fc:	8c 52       	subi	r24, 0x2C	; 44
     4fe:	9c 4f       	sbci	r25, 0xFC	; 252
     500:	08 95       	ret
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	9f ef       	ldi	r25, 0xFF	; 255
     506:	08 95       	ret

00000508 <correctAng>:
			break;
		}
		default:break;
	}
	return -1;
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	91 05       	cpc	r25, r1
}
     50c:	51 f0       	breq	.+20     	; 0x522 <correctAng+0x1a>
// true : PWM Value is available
// false : unavailable
bool correctAng(int q, int idx, int m){
	int com1, com2; // MIN, MAX for each Motor
	
	switch(q){
     50e:	1c f4       	brge	.+6      	; 0x516 <correctAng+0xe>
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	51 f0       	breq	.+20     	; 0x528 <correctAng+0x20>
     514:	20 c0       	rjmp	.+64     	; 0x556 <correctAng+0x4e>
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	91 05       	cpc	r25, r1
     51a:	59 f0       	breq	.+22     	; 0x532 <correctAng+0x2a>
     51c:	04 97       	sbiw	r24, 0x04	; 4
     51e:	71 f0       	breq	.+28     	; 0x53c <correctAng+0x34>
     520:	1a c0       	rjmp	.+52     	; 0x556 <correctAng+0x4e>
			if(idx==0) {com1 = NPULSE_MIN; com2 = NPULSE_MAX;}
			else {com1 = EPULSE_MIN; com2 = EPULSE_MAX;}
			break;
		}
		case 2:{
			if(idx==0) {com1 = WPULSE_MIN; com2 = WPULSE_MAX;}
     522:	26 e5       	ldi	r18, 0x56	; 86
     524:	33 e1       	ldi	r19, 0x13	; 19
     526:	17 c0       	rjmp	.+46     	; 0x556 <correctAng+0x4e>
bool correctAng(int q, int idx, int m){
	int com1, com2; // MIN, MAX for each Motor
	
	switch(q){
		case 1:{
			if(idx==0) {com1 = NPULSE_MIN; com2 = NPULSE_MAX;}
     528:	67 2b       	or	r22, r23
     52a:	69 f0       	breq	.+26     	; 0x546 <correctAng+0x3e>
			else {com1 = EPULSE_MIN; com2 = EPULSE_MAX;}
     52c:	28 e8       	ldi	r18, 0x88	; 136
     52e:	33 e1       	ldi	r19, 0x13	; 19
     530:	12 c0       	rjmp	.+36     	; 0x556 <correctAng+0x4e>
			if(idx==0) {com1 = WPULSE_MIN; com2 = WPULSE_MAX;}
			else {com1 = NPULSE_MIN; com2 = NPULSE_MAX;}
			break;
		}
		case 3:{
			if(idx==0) {com1 = SPULSE_MIN; com2 = SPULSE_MAX;}
     532:	67 2b       	or	r22, r23
     534:	59 f0       	breq	.+22     	; 0x54c <correctAng+0x44>
			else {com1 = WPULSE_MIN; com2 = WPULSE_MAX;}
     536:	26 e5       	ldi	r18, 0x56	; 86
     538:	33 e1       	ldi	r19, 0x13	; 19
     53a:	0d c0       	rjmp	.+26     	; 0x556 <correctAng+0x4e>
			break;
		}
		case 4:{
			if(idx==0) {com1 = EPULSE_MIN; com2 = EPULSE_MAX;}
     53c:	67 2b       	or	r22, r23
     53e:	49 f0       	breq	.+18     	; 0x552 <correctAng+0x4a>
			else {com1 = SPULSE_MIN; com2 = SPULSE_MAX;}
     540:	20 ec       	ldi	r18, 0xC0	; 192
     542:	32 e1       	ldi	r19, 0x12	; 18
     544:	08 c0       	rjmp	.+16     	; 0x556 <correctAng+0x4e>
bool correctAng(int q, int idx, int m){
	int com1, com2; // MIN, MAX for each Motor
	
	switch(q){
		case 1:{
			if(idx==0) {com1 = NPULSE_MIN; com2 = NPULSE_MAX;}
     546:	26 e5       	ldi	r18, 0x56	; 86
     548:	33 e1       	ldi	r19, 0x13	; 19
     54a:	05 c0       	rjmp	.+10     	; 0x556 <correctAng+0x4e>
			if(idx==0) {com1 = WPULSE_MIN; com2 = WPULSE_MAX;}
			else {com1 = NPULSE_MIN; com2 = NPULSE_MAX;}
			break;
		}
		case 3:{
			if(idx==0) {com1 = SPULSE_MIN; com2 = SPULSE_MAX;}
     54c:	20 ec       	ldi	r18, 0xC0	; 192
     54e:	32 e1       	ldi	r19, 0x12	; 18
     550:	02 c0       	rjmp	.+4      	; 0x556 <correctAng+0x4e>
			else {com1 = WPULSE_MIN; com2 = WPULSE_MAX;}
			break;
		}
		case 4:{
			if(idx==0) {com1 = EPULSE_MIN; com2 = EPULSE_MAX;}
     552:	28 e8       	ldi	r18, 0x88	; 136
     554:	33 e1       	ldi	r19, 0x13	; 19
			else {com1 = SPULSE_MIN; com2 = SPULSE_MAX;}
			break;
		}
		default: break;
	}
		if(m<com1||m>com2) return false;
     556:	44 3d       	cpi	r20, 0xD4	; 212
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	58 07       	cpc	r21, r24
     55c:	34 f0       	brlt	.+12     	; 0x56a <correctAng+0x62>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	24 17       	cp	r18, r20
     562:	35 07       	cpc	r19, r21
     564:	1c f4       	brge	.+6      	; 0x56c <correctAng+0x64>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret
     56a:	80 e0       	ldi	r24, 0x00	; 0
		return true;
}
     56c:	08 95       	ret

0000056e <macrosel>:

// move Servo Motor
void macrosel(int q, int idx, double ang){
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ec 01       	movw	r28, r24
     57c:	8b 01       	movw	r16, r22
	int m = rescale(q, idx, ang); // rescale angle to PWM
     57e:	ca 01       	movw	r24, r20
     580:	b9 01       	movw	r22, r18
     582:	4e d4       	rcall	.+2204   	; 0xe20 <__fixsfsi>
     584:	ab 01       	movw	r20, r22
     586:	b8 01       	movw	r22, r16
     588:	ce 01       	movw	r24, r28
     58a:	04 df       	rcall	.-504    	; 0x394 <rescale>
     58c:	7c 01       	movw	r14, r24
	if(m==-1||!correctAng(q, idx, m)) return; // if unavailable, end the function
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	e8 16       	cp	r14, r24
     592:	f8 06       	cpc	r15, r24
     594:	c1 f1       	breq	.+112    	; 0x606 <macrosel+0x98>
     596:	a7 01       	movw	r20, r14
     598:	b8 01       	movw	r22, r16
     59a:	ce 01       	movw	r24, r28
     59c:	b5 df       	rcall	.-150    	; 0x508 <correctAng>
     59e:	88 23       	and	r24, r24
     5a0:	91 f1       	breq	.+100    	; 0x606 <macrosel+0x98>
	
	// move motor
	if(q==1) {
     5a2:	c1 30       	cpi	r28, 0x01	; 1
     5a4:	d1 05       	cpc	r29, r1
     5a6:	51 f4       	brne	.+20     	; 0x5bc <macrosel+0x4e>
		if(idx==0)	OCR3A = m;
     5a8:	01 2b       	or	r16, r17
     5aa:	29 f4       	brne	.+10     	; 0x5b6 <macrosel+0x48>
     5ac:	f0 92 87 00 	sts	0x0087, r15	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5b0:	e0 92 86 00 	sts	0x0086, r14	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5b4:	28 c0       	rjmp	.+80     	; 0x606 <macrosel+0x98>
		else OCR1B = m;
     5b6:	f9 bc       	out	0x29, r15	; 41
     5b8:	e8 bc       	out	0x28, r14	; 40
     5ba:	25 c0       	rjmp	.+74     	; 0x606 <macrosel+0x98>
	}
	else if(q==2){
     5bc:	c2 30       	cpi	r28, 0x02	; 2
     5be:	d1 05       	cpc	r29, r1
     5c0:	51 f4       	brne	.+20     	; 0x5d6 <macrosel+0x68>
		if(idx==0)	OCR1A = m;
     5c2:	01 2b       	or	r16, r17
     5c4:	19 f4       	brne	.+6      	; 0x5cc <macrosel+0x5e>
     5c6:	fb bc       	out	0x2b, r15	; 43
     5c8:	ea bc       	out	0x2a, r14	; 42
     5ca:	1d c0       	rjmp	.+58     	; 0x606 <macrosel+0x98>
		else OCR3A = m;
     5cc:	f0 92 87 00 	sts	0x0087, r15	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5d0:	e0 92 86 00 	sts	0x0086, r14	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5d4:	18 c0       	rjmp	.+48     	; 0x606 <macrosel+0x98>
	}
	else if(q==3){
     5d6:	c3 30       	cpi	r28, 0x03	; 3
     5d8:	d1 05       	cpc	r29, r1
     5da:	51 f4       	brne	.+20     	; 0x5f0 <macrosel+0x82>
		if(idx==0)	OCR3B = m;
     5dc:	01 2b       	or	r16, r17
     5de:	29 f4       	brne	.+10     	; 0x5ea <macrosel+0x7c>
     5e0:	f0 92 85 00 	sts	0x0085, r15	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     5e4:	e0 92 84 00 	sts	0x0084, r14	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <macrosel+0x98>
		else OCR1A = m;
     5ea:	fb bc       	out	0x2b, r15	; 43
     5ec:	ea bc       	out	0x2a, r14	; 42
     5ee:	0b c0       	rjmp	.+22     	; 0x606 <macrosel+0x98>
	}
	else if(q==4){
     5f0:	24 97       	sbiw	r28, 0x04	; 4
     5f2:	49 f4       	brne	.+18     	; 0x606 <macrosel+0x98>
		if(idx==0)	OCR1B = m;
     5f4:	01 2b       	or	r16, r17
     5f6:	19 f4       	brne	.+6      	; 0x5fe <macrosel+0x90>
     5f8:	f9 bc       	out	0x29, r15	; 41
     5fa:	e8 bc       	out	0x28, r14	; 40
     5fc:	04 c0       	rjmp	.+8      	; 0x606 <macrosel+0x98>
		else OCR3B = m;
     5fe:	f0 92 85 00 	sts	0x0085, r15	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     602:	e0 92 84 00 	sts	0x0084, r14	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	}
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <killEnemy>:

// get Angle and move Servo
void killEnemy(int idx){
     614:	4f 92       	push	r4
     616:	5f 92       	push	r5
     618:	6f 92       	push	r6
     61a:	7f 92       	push	r7
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
	// atan : -90~90, atan2 : 0~360
	int ang1, ang2;
	switch(Enemy[idx].q){
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	e6 5d       	subi	r30, 0xD6	; 214
     646:	fb 4f       	sbci	r31, 0xFB	; 251
     648:	c4 80       	ldd	r12, Z+4	; 0x04
     64a:	d5 80       	ldd	r13, Z+5	; 0x05
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	c8 16       	cp	r12, r24
     650:	d1 04       	cpc	r13, r1
     652:	09 f4       	brne	.+2      	; 0x656 <killEnemy+0x42>
     654:	65 c0       	rjmp	.+202    	; 0x720 <killEnemy+0x10c>
     656:	2c f4       	brge	.+10     	; 0x662 <killEnemy+0x4e>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	c8 16       	cp	r12, r24
     65c:	d1 04       	cpc	r13, r1
     65e:	61 f0       	breq	.+24     	; 0x678 <killEnemy+0x64>
     660:	69 c1       	rjmp	.+722    	; 0x934 <killEnemy+0x320>
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	c8 16       	cp	r12, r24
     666:	d1 04       	cpc	r13, r1
     668:	09 f4       	brne	.+2      	; 0x66c <killEnemy+0x58>
     66a:	ad c0       	rjmp	.+346    	; 0x7c6 <killEnemy+0x1b2>
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	c8 16       	cp	r12, r24
     670:	d1 04       	cpc	r13, r1
     672:	09 f4       	brne	.+2      	; 0x676 <killEnemy+0x62>
     674:	07 c1       	rjmp	.+526    	; 0x884 <killEnemy+0x270>
     676:	5e c1       	rjmp	.+700    	; 0x934 <killEnemy+0x320>
		case 1:{
			ang1 = (int)(ceil(atan2(Enemy[idx].y - L, Enemy[idx].x) * 180 / PI));
     678:	fe 01       	movw	r30, r28
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	ec 0f       	add	r30, r28
     680:	fd 1f       	adc	r31, r29
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	e6 5d       	subi	r30, 0xD6	; 214
     688:	fb 4f       	sbci	r31, 0xFB	; 251
     68a:	00 81       	ld	r16, Z
     68c:	11 81       	ldd	r17, Z+1	; 0x01
     68e:	a2 80       	ldd	r10, Z+2	; 0x02
     690:	b3 80       	ldd	r11, Z+3	; 0x03
     692:	b8 01       	movw	r22, r16
     694:	01 2e       	mov	r0, r17
     696:	00 0c       	add	r0, r0
     698:	88 0b       	sbc	r24, r24
     69a:	99 0b       	sbc	r25, r25
     69c:	f4 d3       	rcall	.+2024   	; 0xe86 <__floatsisf>
     69e:	2b 01       	movw	r4, r22
     6a0:	3c 01       	movw	r6, r24
     6a2:	b5 01       	movw	r22, r10
     6a4:	6a 50       	subi	r22, 0x0A	; 10
     6a6:	71 09       	sbc	r23, r1
     6a8:	07 2e       	mov	r0, r23
     6aa:	00 0c       	add	r0, r0
     6ac:	88 0b       	sbc	r24, r24
     6ae:	99 0b       	sbc	r25, r25
     6b0:	ea d3       	rcall	.+2004   	; 0xe86 <__floatsisf>
     6b2:	a3 01       	movw	r20, r6
     6b4:	92 01       	movw	r18, r4
     6b6:	e6 d2       	rcall	.+1484   	; 0xc84 <atan2>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	44 e3       	ldi	r20, 0x34	; 52
     6be:	53 e4       	ldi	r21, 0x43	; 67
     6c0:	da d4       	rcall	.+2484   	; 0x1076 <__mulsf3>
     6c2:	23 ec       	ldi	r18, 0xC3	; 195
     6c4:	35 ef       	ldi	r19, 0xF5	; 245
     6c6:	48 e4       	ldi	r20, 0x48	; 72
     6c8:	50 e4       	ldi	r21, 0x40	; 64
     6ca:	42 d3       	rcall	.+1668   	; 0xd50 <__divsf3>
     6cc:	2e d3       	rcall	.+1628   	; 0xd2a <ceil>
     6ce:	a8 d3       	rcall	.+1872   	; 0xe20 <__fixsfsi>
     6d0:	7b 01       	movw	r14, r22
			ang2 = (int)(ceil(180 - atan2(Enemy[idx].x - L, Enemy[idx].y) * 180 / PI));
     6d2:	b5 01       	movw	r22, r10
     6d4:	bb 0c       	add	r11, r11
     6d6:	88 0b       	sbc	r24, r24
     6d8:	99 0b       	sbc	r25, r25
     6da:	d5 d3       	rcall	.+1962   	; 0xe86 <__floatsisf>
     6dc:	4b 01       	movw	r8, r22
     6de:	5c 01       	movw	r10, r24
     6e0:	b8 01       	movw	r22, r16
     6e2:	6a 50       	subi	r22, 0x0A	; 10
     6e4:	71 09       	sbc	r23, r1
     6e6:	07 2e       	mov	r0, r23
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	cb d3       	rcall	.+1942   	; 0xe86 <__floatsisf>
     6f0:	a5 01       	movw	r20, r10
     6f2:	94 01       	movw	r18, r8
     6f4:	c7 d2       	rcall	.+1422   	; 0xc84 <atan2>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	44 e3       	ldi	r20, 0x34	; 52
     6fc:	53 e4       	ldi	r21, 0x43	; 67
     6fe:	bb d4       	rcall	.+2422   	; 0x1076 <__mulsf3>
     700:	23 ec       	ldi	r18, 0xC3	; 195
     702:	35 ef       	ldi	r19, 0xF5	; 245
     704:	48 e4       	ldi	r20, 0x48	; 72
     706:	50 e4       	ldi	r21, 0x40	; 64
     708:	23 d3       	rcall	.+1606   	; 0xd50 <__divsf3>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	84 e3       	ldi	r24, 0x34	; 52
     714:	93 e4       	ldi	r25, 0x43	; 67
     716:	42 d2       	rcall	.+1156   	; 0xb9c <__subsf3>
     718:	08 d3       	rcall	.+1552   	; 0xd2a <ceil>
     71a:	82 d3       	rcall	.+1796   	; 0xe20 <__fixsfsi>
     71c:	8b 01       	movw	r16, r22
     71e:	0a c1       	rjmp	.+532    	; 0x934 <killEnemy+0x320>
			break;
     720:	fe 01       	movw	r30, r28
		}
		case 2:{
			ang1 = (int)(abs(ceil(atan2(Enemy[idx].x + L, Enemy[idx].y) * 180 / PI)));
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ec 0f       	add	r30, r28
     728:	fd 1f       	adc	r31, r29
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	e6 5d       	subi	r30, 0xD6	; 214
     730:	fb 4f       	sbci	r31, 0xFB	; 251
     732:	02 81       	ldd	r16, Z+2	; 0x02
     734:	13 81       	ldd	r17, Z+3	; 0x03
     736:	a0 80       	ld	r10, Z
     738:	b1 80       	ldd	r11, Z+1	; 0x01
     73a:	b8 01       	movw	r22, r16
     73c:	01 2e       	mov	r0, r17
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	a0 d3       	rcall	.+1856   	; 0xe86 <__floatsisf>
     746:	2b 01       	movw	r4, r22
     748:	3c 01       	movw	r6, r24
     74a:	b5 01       	movw	r22, r10
     74c:	66 5f       	subi	r22, 0xF6	; 246
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	07 2e       	mov	r0, r23
     752:	00 0c       	add	r0, r0
     754:	88 0b       	sbc	r24, r24
     756:	99 0b       	sbc	r25, r25
     758:	96 d3       	rcall	.+1836   	; 0xe86 <__floatsisf>
     75a:	a3 01       	movw	r20, r6
     75c:	92 01       	movw	r18, r4
     75e:	92 d2       	rcall	.+1316   	; 0xc84 <atan2>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	44 e3       	ldi	r20, 0x34	; 52
     766:	53 e4       	ldi	r21, 0x43	; 67
     768:	86 d4       	rcall	.+2316   	; 0x1076 <__mulsf3>
     76a:	23 ec       	ldi	r18, 0xC3	; 195
     76c:	35 ef       	ldi	r19, 0xF5	; 245
     76e:	48 e4       	ldi	r20, 0x48	; 72
     770:	50 e4       	ldi	r21, 0x40	; 64
     772:	ee d2       	rcall	.+1500   	; 0xd50 <__divsf3>
     774:	da d2       	rcall	.+1460   	; 0xd2a <ceil>
     776:	54 d3       	rcall	.+1704   	; 0xe20 <__fixsfsi>
     778:	7b 01       	movw	r14, r22
     77a:	77 23       	and	r23, r23
     77c:	24 f4       	brge	.+8      	; 0x786 <killEnemy+0x172>
     77e:	ee 24       	eor	r14, r14
     780:	ff 24       	eor	r15, r15
     782:	e6 1a       	sub	r14, r22
     784:	f7 0a       	sbc	r15, r23
			ang2 = (int)(ceil(atan2(Enemy[idx].y - L, Enemy[idx].x) * 180 / PI));
     786:	b5 01       	movw	r22, r10
     788:	bb 0c       	add	r11, r11
     78a:	88 0b       	sbc	r24, r24
     78c:	99 0b       	sbc	r25, r25
     78e:	7b d3       	rcall	.+1782   	; 0xe86 <__floatsisf>
     790:	4b 01       	movw	r8, r22
     792:	5c 01       	movw	r10, r24
     794:	b8 01       	movw	r22, r16
     796:	6a 50       	subi	r22, 0x0A	; 10
     798:	71 09       	sbc	r23, r1
     79a:	07 2e       	mov	r0, r23
     79c:	00 0c       	add	r0, r0
     79e:	88 0b       	sbc	r24, r24
     7a0:	99 0b       	sbc	r25, r25
     7a2:	71 d3       	rcall	.+1762   	; 0xe86 <__floatsisf>
     7a4:	a5 01       	movw	r20, r10
     7a6:	94 01       	movw	r18, r8
     7a8:	6d d2       	rcall	.+1242   	; 0xc84 <atan2>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	44 e3       	ldi	r20, 0x34	; 52
     7b0:	53 e4       	ldi	r21, 0x43	; 67
     7b2:	61 d4       	rcall	.+2242   	; 0x1076 <__mulsf3>
     7b4:	23 ec       	ldi	r18, 0xC3	; 195
     7b6:	35 ef       	ldi	r19, 0xF5	; 245
     7b8:	48 e4       	ldi	r20, 0x48	; 72
     7ba:	50 e4       	ldi	r21, 0x40	; 64
     7bc:	c9 d2       	rcall	.+1426   	; 0xd50 <__divsf3>
     7be:	b5 d2       	rcall	.+1386   	; 0xd2a <ceil>
     7c0:	2f d3       	rcall	.+1630   	; 0xe20 <__fixsfsi>
     7c2:	8b 01       	movw	r16, r22
     7c4:	b7 c0       	rjmp	.+366    	; 0x934 <killEnemy+0x320>
     7c6:	fe 01       	movw	r30, r28
			break;
		}
		case 3:{
			ang1 = (int)(180 - abs(ceil(atan2(Enemy[idx].y + L, Enemy[idx].x) * 180 / PI)));
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	ec 0f       	add	r30, r28
     7ce:	fd 1f       	adc	r31, r29
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e6 5d       	subi	r30, 0xD6	; 214
     7d6:	fb 4f       	sbci	r31, 0xFB	; 251
     7d8:	00 81       	ld	r16, Z
     7da:	11 81       	ldd	r17, Z+1	; 0x01
     7dc:	a2 80       	ldd	r10, Z+2	; 0x02
     7de:	b3 80       	ldd	r11, Z+3	; 0x03
     7e0:	b8 01       	movw	r22, r16
     7e2:	01 2e       	mov	r0, r17
     7e4:	00 0c       	add	r0, r0
     7e6:	88 0b       	sbc	r24, r24
     7e8:	99 0b       	sbc	r25, r25
     7ea:	4d d3       	rcall	.+1690   	; 0xe86 <__floatsisf>
     7ec:	2b 01       	movw	r4, r22
     7ee:	3c 01       	movw	r6, r24
     7f0:	b5 01       	movw	r22, r10
     7f2:	66 5f       	subi	r22, 0xF6	; 246
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	07 2e       	mov	r0, r23
     7f8:	00 0c       	add	r0, r0
     7fa:	88 0b       	sbc	r24, r24
     7fc:	99 0b       	sbc	r25, r25
     7fe:	43 d3       	rcall	.+1670   	; 0xe86 <__floatsisf>
     800:	a3 01       	movw	r20, r6
     802:	92 01       	movw	r18, r4
     804:	3f d2       	rcall	.+1150   	; 0xc84 <atan2>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	44 e3       	ldi	r20, 0x34	; 52
     80c:	53 e4       	ldi	r21, 0x43	; 67
     80e:	33 d4       	rcall	.+2150   	; 0x1076 <__mulsf3>
     810:	23 ec       	ldi	r18, 0xC3	; 195
     812:	35 ef       	ldi	r19, 0xF5	; 245
     814:	48 e4       	ldi	r20, 0x48	; 72
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	9b d2       	rcall	.+1334   	; 0xd50 <__divsf3>
     81a:	87 d2       	rcall	.+1294   	; 0xd2a <ceil>
     81c:	01 d3       	rcall	.+1538   	; 0xe20 <__fixsfsi>
     81e:	9b 01       	movw	r18, r22
     820:	77 23       	and	r23, r23
     822:	24 f4       	brge	.+8      	; 0x82c <killEnemy+0x218>
     824:	22 27       	eor	r18, r18
     826:	33 27       	eor	r19, r19
     828:	26 1b       	sub	r18, r22
     82a:	37 0b       	sbc	r19, r23
     82c:	64 eb       	ldi	r22, 0xB4	; 180
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	7b 01       	movw	r14, r22
     832:	e2 1a       	sub	r14, r18
			ang2 = (int)abs(ceil(atan2(Enemy[idx].x + L, Enemy[idx].y) * 180 / PI));
     834:	f3 0a       	sbc	r15, r19
     836:	b5 01       	movw	r22, r10
     838:	bb 0c       	add	r11, r11
     83a:	88 0b       	sbc	r24, r24
     83c:	99 0b       	sbc	r25, r25
     83e:	23 d3       	rcall	.+1606   	; 0xe86 <__floatsisf>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
     844:	b8 01       	movw	r22, r16
     846:	66 5f       	subi	r22, 0xF6	; 246
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	07 2e       	mov	r0, r23
     84c:	00 0c       	add	r0, r0
     84e:	88 0b       	sbc	r24, r24
     850:	99 0b       	sbc	r25, r25
     852:	19 d3       	rcall	.+1586   	; 0xe86 <__floatsisf>
     854:	a5 01       	movw	r20, r10
     856:	94 01       	movw	r18, r8
     858:	15 d2       	rcall	.+1066   	; 0xc84 <atan2>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	44 e3       	ldi	r20, 0x34	; 52
     860:	53 e4       	ldi	r21, 0x43	; 67
     862:	09 d4       	rcall	.+2066   	; 0x1076 <__mulsf3>
     864:	23 ec       	ldi	r18, 0xC3	; 195
     866:	35 ef       	ldi	r19, 0xF5	; 245
     868:	48 e4       	ldi	r20, 0x48	; 72
     86a:	50 e4       	ldi	r21, 0x40	; 64
     86c:	71 d2       	rcall	.+1250   	; 0xd50 <__divsf3>
     86e:	5d d2       	rcall	.+1210   	; 0xd2a <ceil>
     870:	d7 d2       	rcall	.+1454   	; 0xe20 <__fixsfsi>
     872:	8b 01       	movw	r16, r22
     874:	77 23       	and	r23, r23
     876:	0c f0       	brlt	.+2      	; 0x87a <killEnemy+0x266>
     878:	5d c0       	rjmp	.+186    	; 0x934 <killEnemy+0x320>
     87a:	00 27       	eor	r16, r16
     87c:	11 27       	eor	r17, r17
     87e:	06 1b       	sub	r16, r22
     880:	17 0b       	sbc	r17, r23
     882:	58 c0       	rjmp	.+176    	; 0x934 <killEnemy+0x320>
     884:	fe 01       	movw	r30, r28
			break;
     886:	ee 0f       	add	r30, r30
		}
		case 4:{
			ang1 = (int)(ceil(180 - atan2(Enemy[idx].x - L, Enemy[idx].y) * 180 / PI));
     888:	ff 1f       	adc	r31, r31
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e6 5d       	subi	r30, 0xD6	; 214
     894:	fb 4f       	sbci	r31, 0xFB	; 251
     896:	02 81       	ldd	r16, Z+2	; 0x02
     898:	13 81       	ldd	r17, Z+3	; 0x03
     89a:	a0 80       	ld	r10, Z
     89c:	b1 80       	ldd	r11, Z+1	; 0x01
     89e:	b8 01       	movw	r22, r16
     8a0:	01 2e       	mov	r0, r17
     8a2:	00 0c       	add	r0, r0
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	ee d2       	rcall	.+1500   	; 0xe86 <__floatsisf>
     8aa:	2b 01       	movw	r4, r22
     8ac:	3c 01       	movw	r6, r24
     8ae:	b5 01       	movw	r22, r10
     8b0:	6a 50       	subi	r22, 0x0A	; 10
     8b2:	71 09       	sbc	r23, r1
     8b4:	07 2e       	mov	r0, r23
     8b6:	00 0c       	add	r0, r0
     8b8:	88 0b       	sbc	r24, r24
     8ba:	99 0b       	sbc	r25, r25
     8bc:	e4 d2       	rcall	.+1480   	; 0xe86 <__floatsisf>
     8be:	a3 01       	movw	r20, r6
     8c0:	92 01       	movw	r18, r4
     8c2:	e0 d1       	rcall	.+960    	; 0xc84 <atan2>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	44 e3       	ldi	r20, 0x34	; 52
     8ca:	53 e4       	ldi	r21, 0x43	; 67
     8cc:	d4 d3       	rcall	.+1960   	; 0x1076 <__mulsf3>
     8ce:	23 ec       	ldi	r18, 0xC3	; 195
     8d0:	35 ef       	ldi	r19, 0xF5	; 245
     8d2:	48 e4       	ldi	r20, 0x48	; 72
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	3c d2       	rcall	.+1144   	; 0xd50 <__divsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	84 e3       	ldi	r24, 0x34	; 52
     8e2:	93 e4       	ldi	r25, 0x43	; 67
     8e4:	5b d1       	rcall	.+694    	; 0xb9c <__subsf3>
     8e6:	21 d2       	rcall	.+1090   	; 0xd2a <ceil>
     8e8:	9b d2       	rcall	.+1334   	; 0xe20 <__fixsfsi>
			ang2 = (int)(ceil(180 + atan2(Enemy[idx].y + L, Enemy[idx].x) * 180 / PI));
     8ea:	7b 01       	movw	r14, r22
     8ec:	b5 01       	movw	r22, r10
     8ee:	bb 0c       	add	r11, r11
     8f0:	88 0b       	sbc	r24, r24
     8f2:	99 0b       	sbc	r25, r25
     8f4:	c8 d2       	rcall	.+1424   	; 0xe86 <__floatsisf>
     8f6:	4b 01       	movw	r8, r22
     8f8:	5c 01       	movw	r10, r24
     8fa:	b8 01       	movw	r22, r16
     8fc:	66 5f       	subi	r22, 0xF6	; 246
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	07 2e       	mov	r0, r23
     902:	00 0c       	add	r0, r0
     904:	88 0b       	sbc	r24, r24
     906:	99 0b       	sbc	r25, r25
     908:	be d2       	rcall	.+1404   	; 0xe86 <__floatsisf>
     90a:	a5 01       	movw	r20, r10
     90c:	94 01       	movw	r18, r8
     90e:	ba d1       	rcall	.+884    	; 0xc84 <atan2>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	44 e3       	ldi	r20, 0x34	; 52
     916:	53 e4       	ldi	r21, 0x43	; 67
     918:	ae d3       	rcall	.+1884   	; 0x1076 <__mulsf3>
     91a:	23 ec       	ldi	r18, 0xC3	; 195
     91c:	35 ef       	ldi	r19, 0xF5	; 245
     91e:	48 e4       	ldi	r20, 0x48	; 72
     920:	50 e4       	ldi	r21, 0x40	; 64
     922:	16 d2       	rcall	.+1068   	; 0xd50 <__divsf3>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	44 e3       	ldi	r20, 0x34	; 52
     92a:	53 e4       	ldi	r21, 0x43	; 67
     92c:	38 d1       	rcall	.+624    	; 0xb9e <__addsf3>
     92e:	fd d1       	rcall	.+1018   	; 0xd2a <ceil>
     930:	77 d2       	rcall	.+1262   	; 0xe20 <__fixsfsi>
     932:	8b 01       	movw	r16, r22
     934:	b7 01       	movw	r22, r14
     936:	ff 0c       	add	r15, r15
     938:	88 0b       	sbc	r24, r24
     93a:	99 0b       	sbc	r25, r25
     93c:	a4 d2       	rcall	.+1352   	; 0xe86 <__floatsisf>
			break;
		}
		default:break;
	}
	 macrosel(Enemy[idx].q, 0, ang1);
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	c6 01       	movw	r24, r12
     948:	12 de       	rcall	.-988    	; 0x56e <macrosel>
     94a:	b8 01       	movw	r22, r16
     94c:	11 0f       	add	r17, r17
     94e:	88 0b       	sbc	r24, r24
     950:	99 0b       	sbc	r25, r25
     952:	99 d2       	rcall	.+1330   	; 0xe86 <__floatsisf>
     954:	9b 01       	movw	r18, r22
     956:	ac 01       	movw	r20, r24
	 macrosel(Enemy[idx].q, 1, ang2);
     958:	ce 01       	movw	r24, r28
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	c8 0f       	add	r28, r24
     960:	d9 1f       	adc	r29, r25
     962:	cc 0f       	add	r28, r28
     964:	dd 1f       	adc	r29, r29
     966:	c6 5d       	subi	r28, 0xD6	; 214
     968:	db 4f       	sbci	r29, 0xFB	; 251
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	8c 81       	ldd	r24, Y+4	; 0x04
     970:	9d 81       	ldd	r25, Y+5	; 0x05
     972:	fd dd       	rcall	.-1030   	; 0x56e <macrosel>
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	bf 90       	pop	r11
}
     986:	af 90       	pop	r10
     988:	9f 90       	pop	r9
     98a:	8f 90       	pop	r8
     98c:	7f 90       	pop	r7
     98e:	6f 90       	pop	r6
     990:	5f 90       	pop	r5
     992:	4f 90       	pop	r4
     994:	08 95       	ret

00000996 <motorInit>:
     996:	84 ed       	ldi	r24, 0xD4	; 212
     998:	93 e0       	ldi	r25, 0x03	; 3
     99a:	9b bd       	out	0x2b, r25	; 43
     99c:	8a bd       	out	0x2a, r24	; 42
     99e:	99 bd       	out	0x29, r25	; 41
     9a0:	88 bd       	out	0x28, r24	; 40
     9a2:	a6 e8       	ldi	r26, 0x86	; 134
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	11 96       	adiw	r26, 0x01	; 1

// Motor Initialization
void motorInit(){
	OCR1A = WPULSE_MIN;
	OCR1B = EPULSE_MIN;
	OCR3A = NPULSE_MIN;
     9a8:	9c 93       	st	X, r25
     9aa:	8e 93       	st	-X, r24
	OCR3B = SPULSE_MIN;
     9ac:	e4 e8       	ldi	r30, 0x84	; 132
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	33 ed       	ldi	r19, 0xD3	; 211
     9b8:	40 e3       	ldi	r20, 0x30	; 48
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	30 40       	sbci	r19, 0x00	; 0
     9be:	40 40       	sbci	r20, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <motorInit+0x24>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <motorInit+0x2e>
     9c4:	00 00       	nop
     9c6:	2f ef       	ldi	r18, 0xFF	; 255
     9c8:	33 ed       	ldi	r19, 0xD3	; 211
     9ca:	40 e3       	ldi	r20, 0x30	; 48
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	30 40       	sbci	r19, 0x00	; 0
     9d0:	40 40       	sbci	r20, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <motorInit+0x36>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <motorInit+0x40>
     9d6:	00 00       	nop
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	33 ed       	ldi	r19, 0xD3	; 211
     9dc:	40 e3       	ldi	r20, 0x30	; 48
     9de:	21 50       	subi	r18, 0x01	; 1
     9e0:	30 40       	sbci	r19, 0x00	; 0
     9e2:	40 40       	sbci	r20, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <motorInit+0x48>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <motorInit+0x52>
     9e8:	00 00       	nop
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);

	OCR1A = WPULSE_MAX;
     9ea:	26 e5       	ldi	r18, 0x56	; 86
     9ec:	33 e1       	ldi	r19, 0x13	; 19
     9ee:	3b bd       	out	0x2b, r19	; 43
     9f0:	2a bd       	out	0x2a, r18	; 42
	OCR1B = EPULSE_MAX;
     9f2:	48 e8       	ldi	r20, 0x88	; 136
     9f4:	53 e1       	ldi	r21, 0x13	; 19
     9f6:	59 bd       	out	0x29, r21	; 41
     9f8:	48 bd       	out	0x28, r20	; 40
	OCR3A = NPULSE_MAX;
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	3c 93       	st	X, r19
     9fe:	2e 93       	st	-X, r18
	OCR3B = SPULSE_MAX;
     a00:	20 ec       	ldi	r18, 0xC0	; 192
     a02:	32 e1       	ldi	r19, 0x12	; 18
     a04:	31 83       	std	Z+1, r19	; 0x01
     a06:	20 83       	st	Z, r18
     a08:	2f ef       	ldi	r18, 0xFF	; 255
     a0a:	33 ed       	ldi	r19, 0xD3	; 211
     a0c:	40 e3       	ldi	r20, 0x30	; 48
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	30 40       	sbci	r19, 0x00	; 0
     a12:	40 40       	sbci	r20, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <motorInit+0x78>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <motorInit+0x82>
     a18:	00 00       	nop
     a1a:	2f ef       	ldi	r18, 0xFF	; 255
     a1c:	33 ed       	ldi	r19, 0xD3	; 211
     a1e:	40 e3       	ldi	r20, 0x30	; 48
     a20:	21 50       	subi	r18, 0x01	; 1
     a22:	30 40       	sbci	r19, 0x00	; 0
     a24:	40 40       	sbci	r20, 0x00	; 0
     a26:	e1 f7       	brne	.-8      	; 0xa20 <motorInit+0x8a>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <motorInit+0x94>
     a2a:	00 00       	nop
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	33 ed       	ldi	r19, 0xD3	; 211
     a30:	40 e3       	ldi	r20, 0x30	; 48
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	30 40       	sbci	r19, 0x00	; 0
     a36:	40 40       	sbci	r20, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <motorInit+0x9c>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <motorInit+0xa6>
     a3c:	00 00       	nop
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);

	OCR1A = WPULSE_MIN;
     a3e:	9b bd       	out	0x2b, r25	; 43
     a40:	8a bd       	out	0x2a, r24	; 42
	OCR1B = EPULSE_MIN;
     a42:	99 bd       	out	0x29, r25	; 41
     a44:	88 bd       	out	0x28, r24	; 40
	OCR3A = NPULSE_MIN;
     a46:	11 96       	adiw	r26, 0x01	; 1
     a48:	9c 93       	st	X, r25
     a4a:	8e 93       	st	-X, r24
	OCR3B = SPULSE_MIN;
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	80 83       	st	Z, r24
     a50:	08 95       	ret

00000a52 <main>:
int main(void)
{
	// pointer for buffer_uart0(400Bytes)
	unsigned char * receivedData;

	InitilaizerTimer(); // Initialize timer 1 and 3
     a52:	93 db       	rcall	.-2266   	; 0x17a <InitilaizerTimer>
	motorInit(); // Motor Initialize
     a54:	a0 df       	rcall	.-192    	; 0x996 <motorInit>
	// UART Initialize
	UART0_init();
     a56:	53 d0       	rcall	.+166    	; 0xafe <UART0_init>
     a58:	8e d0       	rcall	.+284    	; 0xb76 <UART1_init>
	UART1_init();
     a5a:	78 94       	sei
     a5c:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <rxReadyFlag_1>
	sei(); // Interrupt Enable

	while (1){
		//if Message received from NodeMCU
		if(rxReadyFlag_1 == 1){
     a60:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <rxReadyFlag_1+0x1>
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	d1 f7       	brne	.-12     	; 0xa5c <main+0xa>
			receivedData = getRxString_1(); // get the Message
     a68:	57 d0       	rcall	.+174    	; 0xb18 <getRxString_1>
     a6a:	b0 db       	rcall	.-2208   	; 0x1cc <cmdParse>
			int error = cmdParse(receivedData); // parse the Message -> if incorrect, error = -1
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	61 f4       	brne	.+24     	; 0xa88 <main+0x36>
//			UART0_printf_string(receivedData);
			if(error==-1){
     a70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
				if(++error_cnt==10) 
     a74:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     a82:	0a 97       	sbiw	r24, 0x0a	; 10
     a84:	59 f7       	brne	.-42     	; 0xa5c <main+0xa>
     a86:	11 c0       	rjmp	.+34     	; 0xaaa <main+0x58>
     a88:	80 e0       	ldi	r24, 0x00	; 0
				  break; // if the message is wrong for 10times, programs exit
			}
			else{
			    for(int q = 0;q<2;q++){
					// if there is an Enemy, kill the Enemy
				    if(isInRange(q))
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	62 dc       	rcall	.-1852   	; 0x352 <isInRange>
     a8e:	88 23       	and	r24, r24
     a90:	19 f0       	breq	.+6      	; 0xa98 <main+0x46>
					    killEnemy(q);
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	be dd       	rcall	.-1156   	; 0x614 <killEnemy>
				  break; // if the message is wrong for 10times, programs exit
			}
			else{
			    for(int q = 0;q<2;q++){
					// if there is an Enemy, kill the Enemy
				    if(isInRange(q))
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	5a dc       	rcall	.-1868   	; 0x352 <isInRange>
     a9e:	88 23       	and	r24, r24
     aa0:	e9 f2       	breq	.-70     	; 0xa5c <main+0xa>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
					    killEnemy(q);
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	b6 dd       	rcall	.-1172   	; 0x614 <killEnemy>
     aa8:	d9 cf       	rjmp	.-78     	; 0xa5c <main+0xa>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	
	return 0;
}
     aae:	08 95       	ret

00000ab0 <UART0_ISR_Receive>:
     ab0:	8c b1       	in	r24, 0x0c	; 12
     ab2:	8d 30       	cpi	r24, 0x0D	; 13
#if 0
     //-----------  Circular start  
	inputq(data);
	//------------  Circular end 
#else	
	if (data == '\r' || data == '\n')   // string의 끝이면
     ab4:	11 f0       	breq	.+4      	; 0xaba <UART0_ISR_Receive+0xa>
     ab6:	8a 30       	cpi	r24, 0x0A	; 10
     ab8:	91 f4       	brne	.+36     	; 0xade <UART0_ISR_Receive+0x2e>
	{
		buffer_0[i] = '\0';   // 종료 문자를 NULL
     aba:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <i>
     abe:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <i+0x1>
     ac2:	ec 5f       	subi	r30, 0xFC	; 252
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	10 82       	st	Z, r1
		rxReadyFlag_0 = 1;	// end message를 나타내는 flag를 set한다.
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rxReadyFlag_0+0x1>
     ad0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rxReadyFlag_0>
		i = 0;
     ad4:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <i+0x1>
     ad8:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <i>
     adc:	08 95       	ret
	}
	else
	{
		buffer_0[i++] = data;   // UART로 부터 읽어온 byte를 string buffer_uart0에 save한다.
     ade:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <i>
     ae2:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <i+0x1>
     ae6:	a9 01       	movw	r20, r18
     ae8:	4f 5f       	subi	r20, 0xFF	; 255
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	50 93 95 02 	sts	0x0295, r21	; 0x800295 <i+0x1>
     af0:	40 93 94 02 	sts	0x0294, r20	; 0x800294 <i>
     af4:	f9 01       	movw	r30, r18
     af6:	ec 5f       	subi	r30, 0xFC	; 252
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
     afa:	80 83       	st	Z, r24
     afc:	08 95       	ret

00000afe <UART0_init>:
	}	
#endif 
}
void UART0_init(void)
{
	UBRR0H = 0x00;
     afe:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600 bps로 설정 
     b02:	8f ec       	ldi	r24, 0xCF	; 207
     b04:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1 << U2X0);   // 2배속 통신	
     b06:	59 9a       	sbi	0x0b, 1	; 11
	UCSR0C |= 0x06;  // Async(비동기). Data길이 8bits. Non Parity(패리티비트 사용 안함). stop 1 bit
     b08:	e5 e9       	ldi	r30, 0x95	; 149
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	86 60       	ori	r24, 0x06	; 6
     b10:	80 83       	st	Z, r24
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0) | (1 << RXCIE0));   // #2. 송.수신 가능 하고록 설정을 하는것이다. 
     b12:	88 e9       	ldi	r24, 0x98	; 152
     b14:	8a b9       	out	0x0a, r24	; 10
     b16:	08 95       	ret

00000b18 <getRxString_1>:
volatile unsigned char buffer_1[MAX_QSIZE]={0};   // UART 부터 읽어온 data를 \r 이나 \n을 만날때 까지 저장할 공간
volatile int rxReadyFlag_1=0;   // \r이나 \n을 만났다는 인디케이터 flag변수

unsigned char *getRxString_1()
{
	rxReadyFlag_1 = 0;   // 또 다른 message를 처리 하기 위하여 rxReadyFlag를 clear한다.
     b18:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <rxReadyFlag_1+0x1>
     b1c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <rxReadyFlag_1>
	return buffer_1;

}
     b20:	88 e9       	ldi	r24, 0x98	; 152
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	08 95       	ret

00000b26 <UART1_ISR_Receive>:

// #3 인터럽트 코드를 작성 한다. 
void UART1_ISR_Receive()
{
	unsigned char data;		// UART RX register로 부터 읽어온 1byte를 저장할 변수
	data = UDR1;			// UART1의 H/W register부터 1byte읽어서 data라는 변수에 저장
     b26:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
#if 0
     //-----------  Circular start  
	inputq(data);
	//------------  Circular end 
#else	
	if (data == '\r' || data == '\n')   // string의 끝이면
     b2a:	8d 30       	cpi	r24, 0x0D	; 13
     b2c:	11 f0       	breq	.+4      	; 0xb32 <UART1_ISR_Receive+0xc>
     b2e:	8a 30       	cpi	r24, 0x0A	; 10
     b30:	91 f4       	brne	.+36     	; 0xb56 <UART1_ISR_Receive+0x30>
	{
		buffer_1[j] = '\0';   // 종료 문자를 NULL
     b32:	e0 91 28 04 	lds	r30, 0x0428	; 0x800428 <j>
     b36:	f0 91 29 04 	lds	r31, 0x0429	; 0x800429 <j+0x1>
     b3a:	e8 56       	subi	r30, 0x68	; 104
     b3c:	fd 4f       	sbci	r31, 0xFD	; 253
     b3e:	10 82       	st	Z, r1
		rxReadyFlag_1 = 1;	// end message를 나타내는 flag를 set한다.
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <rxReadyFlag_1+0x1>
     b48:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <rxReadyFlag_1>
		j = 0;
     b4c:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <j+0x1>
     b50:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <j>
     b54:	08 95       	ret
	}
	else
	{
		buffer_1[j++] = data;   // UART로 부터 읽어온 byte를 string buffer_uart0에 save한다.
     b56:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <j>
     b5a:	30 91 29 04 	lds	r19, 0x0429	; 0x800429 <j+0x1>
     b5e:	a9 01       	movw	r20, r18
     b60:	4f 5f       	subi	r20, 0xFF	; 255
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	50 93 29 04 	sts	0x0429, r21	; 0x800429 <j+0x1>
     b68:	40 93 28 04 	sts	0x0428, r20	; 0x800428 <j>
     b6c:	f9 01       	movw	r30, r18
     b6e:	e8 56       	subi	r30, 0x68	; 104
     b70:	fd 4f       	sbci	r31, 0xFD	; 253
     b72:	80 83       	st	Z, r24
     b74:	08 95       	ret

00000b76 <UART1_init>:
	}	
#endif 
}
void UART1_init(void)
{
	UBRR1H = 0x00;
     b76:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600 bps로 설정 
     b7a:	8f ec       	ldi	r24, 0xCF	; 207
     b7c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= (1 << U2X1);   // 2배속 통신	
     b80:	eb e9       	ldi	r30, 0x9B	; 155
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	82 60       	ori	r24, 0x02	; 2
     b88:	80 83       	st	Z, r24
	UCSR1C |= 0x06;  // Async(비동기). Data길이 8bits. Non Parity(패리티비트 사용 안함). stop 1 bit
     b8a:	ed e9       	ldi	r30, 0x9D	; 157
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	86 60       	ori	r24, 0x06	; 6
     b92:	80 83       	st	Z, r24
	UCSR1B = ((1<<RXEN1)|(1<<TXEN1) | (1 << RXCIE1));   // #2. 송.수신 가능 하고록 설정을 하는것이다. 
     b94:	88 e9       	ldi	r24, 0x98	; 152
     b96:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     b9a:	08 95       	ret

00000b9c <__subsf3>:
     b9c:	50 58       	subi	r21, 0x80	; 128

00000b9e <__addsf3>:
     b9e:	bb 27       	eor	r27, r27
     ba0:	aa 27       	eor	r26, r26
     ba2:	0e d0       	rcall	.+28     	; 0xbc0 <__addsf3x>
     ba4:	10 c2       	rjmp	.+1056   	; 0xfc6 <__fp_round>
     ba6:	01 d2       	rcall	.+1026   	; 0xfaa <__fp_pscA>
     ba8:	30 f0       	brcs	.+12     	; 0xbb6 <__addsf3+0x18>
     baa:	06 d2       	rcall	.+1036   	; 0xfb8 <__fp_pscB>
     bac:	20 f0       	brcs	.+8      	; 0xbb6 <__addsf3+0x18>
     bae:	31 f4       	brne	.+12     	; 0xbbc <__addsf3+0x1e>
     bb0:	9f 3f       	cpi	r25, 0xFF	; 255
     bb2:	11 f4       	brne	.+4      	; 0xbb8 <__addsf3+0x1a>
     bb4:	1e f4       	brtc	.+6      	; 0xbbc <__addsf3+0x1e>
     bb6:	d1 c1       	rjmp	.+930    	; 0xf5a <__fp_nan>
     bb8:	0e f4       	brtc	.+2      	; 0xbbc <__addsf3+0x1e>
     bba:	e0 95       	com	r30
     bbc:	e7 fb       	bst	r30, 7
     bbe:	9e c1       	rjmp	.+828    	; 0xefc <__fp_inf>

00000bc0 <__addsf3x>:
     bc0:	e9 2f       	mov	r30, r25
     bc2:	12 d2       	rcall	.+1060   	; 0xfe8 <__fp_split3>
     bc4:	80 f3       	brcs	.-32     	; 0xba6 <__addsf3+0x8>
     bc6:	ba 17       	cp	r27, r26
     bc8:	62 07       	cpc	r22, r18
     bca:	73 07       	cpc	r23, r19
     bcc:	84 07       	cpc	r24, r20
     bce:	95 07       	cpc	r25, r21
     bd0:	18 f0       	brcs	.+6      	; 0xbd8 <__addsf3x+0x18>
     bd2:	71 f4       	brne	.+28     	; 0xbf0 <__addsf3x+0x30>
     bd4:	9e f5       	brtc	.+102    	; 0xc3c <__addsf3x+0x7c>
     bd6:	41 c2       	rjmp	.+1154   	; 0x105a <__fp_zero>
     bd8:	0e f4       	brtc	.+2      	; 0xbdc <__addsf3x+0x1c>
     bda:	e0 95       	com	r30
     bdc:	0b 2e       	mov	r0, r27
     bde:	ba 2f       	mov	r27, r26
     be0:	a0 2d       	mov	r26, r0
     be2:	0b 01       	movw	r0, r22
     be4:	b9 01       	movw	r22, r18
     be6:	90 01       	movw	r18, r0
     be8:	0c 01       	movw	r0, r24
     bea:	ca 01       	movw	r24, r20
     bec:	a0 01       	movw	r20, r0
     bee:	11 24       	eor	r1, r1
     bf0:	ff 27       	eor	r31, r31
     bf2:	59 1b       	sub	r21, r25
     bf4:	99 f0       	breq	.+38     	; 0xc1c <__addsf3x+0x5c>
     bf6:	59 3f       	cpi	r21, 0xF9	; 249
     bf8:	50 f4       	brcc	.+20     	; 0xc0e <__addsf3x+0x4e>
     bfa:	50 3e       	cpi	r21, 0xE0	; 224
     bfc:	68 f1       	brcs	.+90     	; 0xc58 <__addsf3x+0x98>
     bfe:	1a 16       	cp	r1, r26
     c00:	f0 40       	sbci	r31, 0x00	; 0
     c02:	a2 2f       	mov	r26, r18
     c04:	23 2f       	mov	r18, r19
     c06:	34 2f       	mov	r19, r20
     c08:	44 27       	eor	r20, r20
     c0a:	58 5f       	subi	r21, 0xF8	; 248
     c0c:	f3 cf       	rjmp	.-26     	; 0xbf4 <__addsf3x+0x34>
     c0e:	46 95       	lsr	r20
     c10:	37 95       	ror	r19
     c12:	27 95       	ror	r18
     c14:	a7 95       	ror	r26
     c16:	f0 40       	sbci	r31, 0x00	; 0
     c18:	53 95       	inc	r21
     c1a:	c9 f7       	brne	.-14     	; 0xc0e <__addsf3x+0x4e>
     c1c:	7e f4       	brtc	.+30     	; 0xc3c <__addsf3x+0x7c>
     c1e:	1f 16       	cp	r1, r31
     c20:	ba 0b       	sbc	r27, r26
     c22:	62 0b       	sbc	r22, r18
     c24:	73 0b       	sbc	r23, r19
     c26:	84 0b       	sbc	r24, r20
     c28:	ba f0       	brmi	.+46     	; 0xc58 <__addsf3x+0x98>
     c2a:	91 50       	subi	r25, 0x01	; 1
     c2c:	a1 f0       	breq	.+40     	; 0xc56 <__addsf3x+0x96>
     c2e:	ff 0f       	add	r31, r31
     c30:	bb 1f       	adc	r27, r27
     c32:	66 1f       	adc	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	88 1f       	adc	r24, r24
     c38:	c2 f7       	brpl	.-16     	; 0xc2a <__addsf3x+0x6a>
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <__addsf3x+0x98>
     c3c:	ba 0f       	add	r27, r26
     c3e:	62 1f       	adc	r22, r18
     c40:	73 1f       	adc	r23, r19
     c42:	84 1f       	adc	r24, r20
     c44:	48 f4       	brcc	.+18     	; 0xc58 <__addsf3x+0x98>
     c46:	87 95       	ror	r24
     c48:	77 95       	ror	r23
     c4a:	67 95       	ror	r22
     c4c:	b7 95       	ror	r27
     c4e:	f7 95       	ror	r31
     c50:	9e 3f       	cpi	r25, 0xFE	; 254
     c52:	08 f0       	brcs	.+2      	; 0xc56 <__addsf3x+0x96>
     c54:	b3 cf       	rjmp	.-154    	; 0xbbc <__addsf3+0x1e>
     c56:	93 95       	inc	r25
     c58:	88 0f       	add	r24, r24
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <__addsf3x+0x9e>
     c5c:	99 27       	eor	r25, r25
     c5e:	ee 0f       	add	r30, r30
     c60:	97 95       	ror	r25
     c62:	87 95       	ror	r24
     c64:	08 95       	ret
     c66:	a1 d1       	rcall	.+834    	; 0xfaa <__fp_pscA>
     c68:	58 f0       	brcs	.+22     	; 0xc80 <__addsf3x+0xc0>
     c6a:	80 e8       	ldi	r24, 0x80	; 128
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	09 f4       	brne	.+2      	; 0xc72 <__addsf3x+0xb2>
     c70:	9e ef       	ldi	r25, 0xFE	; 254
     c72:	a2 d1       	rcall	.+836    	; 0xfb8 <__fp_pscB>
     c74:	28 f0       	brcs	.+10     	; 0xc80 <__addsf3x+0xc0>
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	51 e0       	ldi	r21, 0x01	; 1
     c7a:	59 f4       	brne	.+22     	; 0xc92 <atan2+0xe>
     c7c:	5e ef       	ldi	r21, 0xFE	; 254
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <atan2+0xe>
     c80:	6c c1       	rjmp	.+728    	; 0xf5a <__fp_nan>
     c82:	eb c1       	rjmp	.+982    	; 0x105a <__fp_zero>

00000c84 <atan2>:
     c84:	e9 2f       	mov	r30, r25
     c86:	e0 78       	andi	r30, 0x80	; 128
     c88:	af d1       	rcall	.+862    	; 0xfe8 <__fp_split3>
     c8a:	68 f3       	brcs	.-38     	; 0xc66 <__addsf3x+0xa6>
     c8c:	09 2e       	mov	r0, r25
     c8e:	05 2a       	or	r0, r21
     c90:	c1 f3       	breq	.-16     	; 0xc82 <__addsf3x+0xc2>
     c92:	26 17       	cp	r18, r22
     c94:	37 07       	cpc	r19, r23
     c96:	48 07       	cpc	r20, r24
     c98:	59 07       	cpc	r21, r25
     c9a:	38 f0       	brcs	.+14     	; 0xcaa <atan2+0x26>
     c9c:	0e 2e       	mov	r0, r30
     c9e:	07 f8       	bld	r0, 7
     ca0:	e0 25       	eor	r30, r0
     ca2:	69 f0       	breq	.+26     	; 0xcbe <atan2+0x3a>
     ca4:	e0 25       	eor	r30, r0
     ca6:	e0 64       	ori	r30, 0x40	; 64
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <atan2+0x3a>
     caa:	ef 63       	ori	r30, 0x3F	; 63
     cac:	07 f8       	bld	r0, 7
     cae:	00 94       	com	r0
     cb0:	07 fa       	bst	r0, 7
     cb2:	db 01       	movw	r26, r22
     cb4:	b9 01       	movw	r22, r18
     cb6:	9d 01       	movw	r18, r26
     cb8:	dc 01       	movw	r26, r24
     cba:	ca 01       	movw	r24, r20
     cbc:	ad 01       	movw	r20, r26
     cbe:	ef 93       	push	r30
     cc0:	56 d0       	rcall	.+172    	; 0xd6e <__divsf3_pse>
     cc2:	81 d1       	rcall	.+770    	; 0xfc6 <__fp_round>
     cc4:	0a d0       	rcall	.+20     	; 0xcda <atan>
     cc6:	5f 91       	pop	r21
     cc8:	55 23       	and	r21, r21
     cca:	31 f0       	breq	.+12     	; 0xcd8 <atan2+0x54>
     ccc:	2b ed       	ldi	r18, 0xDB	; 219
     cce:	3f e0       	ldi	r19, 0x0F	; 15
     cd0:	49 e4       	ldi	r20, 0x49	; 73
     cd2:	50 fd       	sbrc	r21, 0
     cd4:	49 ec       	ldi	r20, 0xC9	; 201
     cd6:	63 cf       	rjmp	.-314    	; 0xb9e <__addsf3>
     cd8:	08 95       	ret

00000cda <atan>:
     cda:	df 93       	push	r29
     cdc:	dd 27       	eor	r29, r29
     cde:	b9 2f       	mov	r27, r25
     ce0:	bf 77       	andi	r27, 0x7F	; 127
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	16 16       	cp	r1, r22
     ce8:	17 06       	cpc	r1, r23
     cea:	48 07       	cpc	r20, r24
     cec:	5b 07       	cpc	r21, r27
     cee:	10 f4       	brcc	.+4      	; 0xcf4 <atan+0x1a>
     cf0:	d9 2f       	mov	r29, r25
     cf2:	ba d1       	rcall	.+884    	; 0x1068 <inverse>
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	7f 93       	push	r23
     cfa:	6f 93       	push	r22
     cfc:	1f d2       	rcall	.+1086   	; 0x113c <square>
     cfe:	ec e8       	ldi	r30, 0x8C	; 140
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	2e d1       	rcall	.+604    	; 0xf60 <__fp_powser>
     d04:	60 d1       	rcall	.+704    	; 0xfc6 <__fp_round>
     d06:	2f 91       	pop	r18
     d08:	3f 91       	pop	r19
     d0a:	4f 91       	pop	r20
     d0c:	5f 91       	pop	r21
     d0e:	bf d1       	rcall	.+894    	; 0x108e <__mulsf3x>
     d10:	dd 23       	and	r29, r29
     d12:	49 f0       	breq	.+18     	; 0xd26 <atan+0x4c>
     d14:	90 58       	subi	r25, 0x80	; 128
     d16:	a2 ea       	ldi	r26, 0xA2	; 162
     d18:	2a ed       	ldi	r18, 0xDA	; 218
     d1a:	3f e0       	ldi	r19, 0x0F	; 15
     d1c:	49 ec       	ldi	r20, 0xC9	; 201
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	d0 78       	andi	r29, 0x80	; 128
     d22:	5d 27       	eor	r21, r29
     d24:	4d df       	rcall	.-358    	; 0xbc0 <__addsf3x>
     d26:	df 91       	pop	r29
     d28:	4e c1       	rjmp	.+668    	; 0xfc6 <__fp_round>

00000d2a <ceil>:
     d2a:	80 d1       	rcall	.+768    	; 0x102c <__fp_trunc>
     d2c:	80 f0       	brcs	.+32     	; 0xd4e <ceil+0x24>
     d2e:	9f 37       	cpi	r25, 0x7F	; 127
     d30:	40 f4       	brcc	.+16     	; 0xd42 <ceil+0x18>
     d32:	91 11       	cpse	r25, r1
     d34:	0e f4       	brtc	.+2      	; 0xd38 <ceil+0xe>
     d36:	92 c1       	rjmp	.+804    	; 0x105c <__fp_szero>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 e8       	ldi	r24, 0x80	; 128
     d3e:	9f e3       	ldi	r25, 0x3F	; 63
     d40:	08 95       	ret
     d42:	26 f0       	brts	.+8      	; 0xd4c <ceil+0x22>
     d44:	1b 16       	cp	r1, r27
     d46:	61 1d       	adc	r22, r1
     d48:	71 1d       	adc	r23, r1
     d4a:	81 1d       	adc	r24, r1
     d4c:	dd c0       	rjmp	.+442    	; 0xf08 <__fp_mintl>
     d4e:	f7 c0       	rjmp	.+494    	; 0xf3e <__fp_mpack>

00000d50 <__divsf3>:
     d50:	0c d0       	rcall	.+24     	; 0xd6a <__divsf3x>
     d52:	39 c1       	rjmp	.+626    	; 0xfc6 <__fp_round>
     d54:	31 d1       	rcall	.+610    	; 0xfb8 <__fp_pscB>
     d56:	40 f0       	brcs	.+16     	; 0xd68 <__divsf3+0x18>
     d58:	28 d1       	rcall	.+592    	; 0xfaa <__fp_pscA>
     d5a:	30 f0       	brcs	.+12     	; 0xd68 <__divsf3+0x18>
     d5c:	21 f4       	brne	.+8      	; 0xd66 <__divsf3+0x16>
     d5e:	5f 3f       	cpi	r21, 0xFF	; 255
     d60:	19 f0       	breq	.+6      	; 0xd68 <__divsf3+0x18>
     d62:	cc c0       	rjmp	.+408    	; 0xefc <__fp_inf>
     d64:	51 11       	cpse	r21, r1
     d66:	7a c1       	rjmp	.+756    	; 0x105c <__fp_szero>
     d68:	f8 c0       	rjmp	.+496    	; 0xf5a <__fp_nan>

00000d6a <__divsf3x>:
     d6a:	3e d1       	rcall	.+636    	; 0xfe8 <__fp_split3>
     d6c:	98 f3       	brcs	.-26     	; 0xd54 <__divsf3+0x4>

00000d6e <__divsf3_pse>:
     d6e:	99 23       	and	r25, r25
     d70:	c9 f3       	breq	.-14     	; 0xd64 <__divsf3+0x14>
     d72:	55 23       	and	r21, r21
     d74:	b1 f3       	breq	.-20     	; 0xd62 <__divsf3+0x12>
     d76:	95 1b       	sub	r25, r21
     d78:	55 0b       	sbc	r21, r21
     d7a:	bb 27       	eor	r27, r27
     d7c:	aa 27       	eor	r26, r26
     d7e:	62 17       	cp	r22, r18
     d80:	73 07       	cpc	r23, r19
     d82:	84 07       	cpc	r24, r20
     d84:	38 f0       	brcs	.+14     	; 0xd94 <__divsf3_pse+0x26>
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	44 1f       	adc	r20, r20
     d90:	aa 1f       	adc	r26, r26
     d92:	a9 f3       	breq	.-22     	; 0xd7e <__divsf3_pse+0x10>
     d94:	33 d0       	rcall	.+102    	; 0xdfc <__divsf3_pse+0x8e>
     d96:	0e 2e       	mov	r0, r30
     d98:	3a f0       	brmi	.+14     	; 0xda8 <__divsf3_pse+0x3a>
     d9a:	e0 e8       	ldi	r30, 0x80	; 128
     d9c:	30 d0       	rcall	.+96     	; 0xdfe <__divsf3_pse+0x90>
     d9e:	91 50       	subi	r25, 0x01	; 1
     da0:	50 40       	sbci	r21, 0x00	; 0
     da2:	e6 95       	lsr	r30
     da4:	00 1c       	adc	r0, r0
     da6:	ca f7       	brpl	.-14     	; 0xd9a <__divsf3_pse+0x2c>
     da8:	29 d0       	rcall	.+82     	; 0xdfc <__divsf3_pse+0x8e>
     daa:	fe 2f       	mov	r31, r30
     dac:	27 d0       	rcall	.+78     	; 0xdfc <__divsf3_pse+0x8e>
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	bb 1f       	adc	r27, r27
     db6:	26 17       	cp	r18, r22
     db8:	37 07       	cpc	r19, r23
     dba:	48 07       	cpc	r20, r24
     dbc:	ab 07       	cpc	r26, r27
     dbe:	b0 e8       	ldi	r27, 0x80	; 128
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <__divsf3_pse+0x56>
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	80 2d       	mov	r24, r0
     dc6:	bf 01       	movw	r22, r30
     dc8:	ff 27       	eor	r31, r31
     dca:	93 58       	subi	r25, 0x83	; 131
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	2a f0       	brmi	.+10     	; 0xdda <__divsf3_pse+0x6c>
     dd0:	9e 3f       	cpi	r25, 0xFE	; 254
     dd2:	51 05       	cpc	r21, r1
     dd4:	68 f0       	brcs	.+26     	; 0xdf0 <__divsf3_pse+0x82>
     dd6:	92 c0       	rjmp	.+292    	; 0xefc <__fp_inf>
     dd8:	41 c1       	rjmp	.+642    	; 0x105c <__fp_szero>
     dda:	5f 3f       	cpi	r21, 0xFF	; 255
     ddc:	ec f3       	brlt	.-6      	; 0xdd8 <__divsf3_pse+0x6a>
     dde:	98 3e       	cpi	r25, 0xE8	; 232
     de0:	dc f3       	brlt	.-10     	; 0xdd8 <__divsf3_pse+0x6a>
     de2:	86 95       	lsr	r24
     de4:	77 95       	ror	r23
     de6:	67 95       	ror	r22
     de8:	b7 95       	ror	r27
     dea:	f7 95       	ror	r31
     dec:	9f 5f       	subi	r25, 0xFF	; 255
     dee:	c9 f7       	brne	.-14     	; 0xde2 <__divsf3_pse+0x74>
     df0:	88 0f       	add	r24, r24
     df2:	91 1d       	adc	r25, r1
     df4:	96 95       	lsr	r25
     df6:	87 95       	ror	r24
     df8:	97 f9       	bld	r25, 7
     dfa:	08 95       	ret
     dfc:	e1 e0       	ldi	r30, 0x01	; 1
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	bb 1f       	adc	r27, r27
     e06:	62 17       	cp	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	ba 07       	cpc	r27, r26
     e0e:	20 f0       	brcs	.+8      	; 0xe18 <__divsf3_pse+0xaa>
     e10:	62 1b       	sub	r22, r18
     e12:	73 0b       	sbc	r23, r19
     e14:	84 0b       	sbc	r24, r20
     e16:	ba 0b       	sbc	r27, r26
     e18:	ee 1f       	adc	r30, r30
     e1a:	88 f7       	brcc	.-30     	; 0xdfe <__divsf3_pse+0x90>
     e1c:	e0 95       	com	r30
     e1e:	08 95       	ret

00000e20 <__fixsfsi>:
     e20:	04 d0       	rcall	.+8      	; 0xe2a <__fixunssfsi>
     e22:	68 94       	set
     e24:	b1 11       	cpse	r27, r1
     e26:	1a c1       	rjmp	.+564    	; 0x105c <__fp_szero>
     e28:	08 95       	ret

00000e2a <__fixunssfsi>:
     e2a:	e6 d0       	rcall	.+460    	; 0xff8 <__fp_splitA>
     e2c:	88 f0       	brcs	.+34     	; 0xe50 <__fixunssfsi+0x26>
     e2e:	9f 57       	subi	r25, 0x7F	; 127
     e30:	90 f0       	brcs	.+36     	; 0xe56 <__fixunssfsi+0x2c>
     e32:	b9 2f       	mov	r27, r25
     e34:	99 27       	eor	r25, r25
     e36:	b7 51       	subi	r27, 0x17	; 23
     e38:	a0 f0       	brcs	.+40     	; 0xe62 <__fixunssfsi+0x38>
     e3a:	d1 f0       	breq	.+52     	; 0xe70 <__fixunssfsi+0x46>
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	1a f0       	brmi	.+6      	; 0xe4c <__fixunssfsi+0x22>
     e46:	ba 95       	dec	r27
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__fixunssfsi+0x12>
     e4a:	12 c0       	rjmp	.+36     	; 0xe70 <__fixunssfsi+0x46>
     e4c:	b1 30       	cpi	r27, 0x01	; 1
     e4e:	81 f0       	breq	.+32     	; 0xe70 <__fixunssfsi+0x46>
     e50:	04 d1       	rcall	.+520    	; 0x105a <__fp_zero>
     e52:	b1 e0       	ldi	r27, 0x01	; 1
     e54:	08 95       	ret
     e56:	01 c1       	rjmp	.+514    	; 0x105a <__fp_zero>
     e58:	67 2f       	mov	r22, r23
     e5a:	78 2f       	mov	r23, r24
     e5c:	88 27       	eor	r24, r24
     e5e:	b8 5f       	subi	r27, 0xF8	; 248
     e60:	39 f0       	breq	.+14     	; 0xe70 <__fixunssfsi+0x46>
     e62:	b9 3f       	cpi	r27, 0xF9	; 249
     e64:	cc f3       	brlt	.-14     	; 0xe58 <__fixunssfsi+0x2e>
     e66:	86 95       	lsr	r24
     e68:	77 95       	ror	r23
     e6a:	67 95       	ror	r22
     e6c:	b3 95       	inc	r27
     e6e:	d9 f7       	brne	.-10     	; 0xe66 <__fixunssfsi+0x3c>
     e70:	3e f4       	brtc	.+14     	; 0xe80 <__fixunssfsi+0x56>
     e72:	90 95       	com	r25
     e74:	80 95       	com	r24
     e76:	70 95       	com	r23
     e78:	61 95       	neg	r22
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	08 95       	ret

00000e82 <__floatunsisf>:
     e82:	e8 94       	clt
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <__floatsisf+0x12>

00000e86 <__floatsisf>:
     e86:	97 fb       	bst	r25, 7
     e88:	3e f4       	brtc	.+14     	; 0xe98 <__floatsisf+0x12>
     e8a:	90 95       	com	r25
     e8c:	80 95       	com	r24
     e8e:	70 95       	com	r23
     e90:	61 95       	neg	r22
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	99 23       	and	r25, r25
     e9a:	a9 f0       	breq	.+42     	; 0xec6 <__floatsisf+0x40>
     e9c:	f9 2f       	mov	r31, r25
     e9e:	96 e9       	ldi	r25, 0x96	; 150
     ea0:	bb 27       	eor	r27, r27
     ea2:	93 95       	inc	r25
     ea4:	f6 95       	lsr	r31
     ea6:	87 95       	ror	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b7 95       	ror	r27
     eae:	f1 11       	cpse	r31, r1
     eb0:	f8 cf       	rjmp	.-16     	; 0xea2 <__floatsisf+0x1c>
     eb2:	fa f4       	brpl	.+62     	; 0xef2 <__floatsisf+0x6c>
     eb4:	bb 0f       	add	r27, r27
     eb6:	11 f4       	brne	.+4      	; 0xebc <__floatsisf+0x36>
     eb8:	60 ff       	sbrs	r22, 0
     eba:	1b c0       	rjmp	.+54     	; 0xef2 <__floatsisf+0x6c>
     ebc:	6f 5f       	subi	r22, 0xFF	; 255
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <__floatsisf+0x6c>
     ec6:	88 23       	and	r24, r24
     ec8:	11 f0       	breq	.+4      	; 0xece <__floatsisf+0x48>
     eca:	96 e9       	ldi	r25, 0x96	; 150
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <__floatsisf+0x6a>
     ece:	77 23       	and	r23, r23
     ed0:	21 f0       	breq	.+8      	; 0xeda <__floatsisf+0x54>
     ed2:	9e e8       	ldi	r25, 0x8E	; 142
     ed4:	87 2f       	mov	r24, r23
     ed6:	76 2f       	mov	r23, r22
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__floatsisf+0x5e>
     eda:	66 23       	and	r22, r22
     edc:	71 f0       	breq	.+28     	; 0xefa <__floatsisf+0x74>
     ede:	96 e8       	ldi	r25, 0x86	; 134
     ee0:	86 2f       	mov	r24, r22
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	2a f0       	brmi	.+10     	; 0xef2 <__floatsisf+0x6c>
     ee8:	9a 95       	dec	r25
     eea:	66 0f       	add	r22, r22
     eec:	77 1f       	adc	r23, r23
     eee:	88 1f       	adc	r24, r24
     ef0:	da f7       	brpl	.-10     	; 0xee8 <__floatsisf+0x62>
     ef2:	88 0f       	add	r24, r24
     ef4:	96 95       	lsr	r25
     ef6:	87 95       	ror	r24
     ef8:	97 f9       	bld	r25, 7
     efa:	08 95       	ret

00000efc <__fp_inf>:
     efc:	97 f9       	bld	r25, 7
     efe:	9f 67       	ori	r25, 0x7F	; 127
     f00:	80 e8       	ldi	r24, 0x80	; 128
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	08 95       	ret

00000f08 <__fp_mintl>:
     f08:	88 23       	and	r24, r24
     f0a:	71 f4       	brne	.+28     	; 0xf28 <__fp_mintl+0x20>
     f0c:	77 23       	and	r23, r23
     f0e:	21 f0       	breq	.+8      	; 0xf18 <__fp_mintl+0x10>
     f10:	98 50       	subi	r25, 0x08	; 8
     f12:	87 2b       	or	r24, r23
     f14:	76 2f       	mov	r23, r22
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <__fp_mintl+0x1e>
     f18:	66 23       	and	r22, r22
     f1a:	11 f4       	brne	.+4      	; 0xf20 <__fp_mintl+0x18>
     f1c:	99 27       	eor	r25, r25
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <__fp_mintl+0x32>
     f20:	90 51       	subi	r25, 0x10	; 16
     f22:	86 2b       	or	r24, r22
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	2a f0       	brmi	.+10     	; 0xf34 <__fp_mintl+0x2c>
     f2a:	9a 95       	dec	r25
     f2c:	66 0f       	add	r22, r22
     f2e:	77 1f       	adc	r23, r23
     f30:	88 1f       	adc	r24, r24
     f32:	da f7       	brpl	.-10     	; 0xf2a <__fp_mintl+0x22>
     f34:	88 0f       	add	r24, r24
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	97 f9       	bld	r25, 7
     f3c:	08 95       	ret

00000f3e <__fp_mpack>:
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	31 f0       	breq	.+12     	; 0xf4e <__fp_mpack_finite+0xc>

00000f42 <__fp_mpack_finite>:
     f42:	91 50       	subi	r25, 0x01	; 1
     f44:	20 f4       	brcc	.+8      	; 0xf4e <__fp_mpack_finite+0xc>
     f46:	87 95       	ror	r24
     f48:	77 95       	ror	r23
     f4a:	67 95       	ror	r22
     f4c:	b7 95       	ror	r27
     f4e:	88 0f       	add	r24, r24
     f50:	91 1d       	adc	r25, r1
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret

00000f5a <__fp_nan>:
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	80 ec       	ldi	r24, 0xC0	; 192
     f5e:	08 95       	ret

00000f60 <__fp_powser>:
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	1f 93       	push	r17
     f66:	0f 93       	push	r16
     f68:	ff 92       	push	r15
     f6a:	ef 92       	push	r14
     f6c:	df 92       	push	r13
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	68 94       	set
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <__fp_powser+0x20>
     f76:	da 2e       	mov	r13, r26
     f78:	ef 01       	movw	r28, r30
     f7a:	89 d0       	rcall	.+274    	; 0x108e <__mulsf3x>
     f7c:	fe 01       	movw	r30, r28
     f7e:	e8 94       	clt
     f80:	a5 91       	lpm	r26, Z+
     f82:	25 91       	lpm	r18, Z+
     f84:	35 91       	lpm	r19, Z+
     f86:	45 91       	lpm	r20, Z+
     f88:	55 91       	lpm	r21, Z+
     f8a:	ae f3       	brts	.-22     	; 0xf76 <__fp_powser+0x16>
     f8c:	ef 01       	movw	r28, r30
     f8e:	18 de       	rcall	.-976    	; 0xbc0 <__addsf3x>
     f90:	fe 01       	movw	r30, r28
     f92:	97 01       	movw	r18, r14
     f94:	a8 01       	movw	r20, r16
     f96:	da 94       	dec	r13
     f98:	79 f7       	brne	.-34     	; 0xf78 <__fp_powser+0x18>
     f9a:	df 90       	pop	r13
     f9c:	ef 90       	pop	r14
     f9e:	ff 90       	pop	r15
     fa0:	0f 91       	pop	r16
     fa2:	1f 91       	pop	r17
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <__fp_pscA>:
     faa:	00 24       	eor	r0, r0
     fac:	0a 94       	dec	r0
     fae:	16 16       	cp	r1, r22
     fb0:	17 06       	cpc	r1, r23
     fb2:	18 06       	cpc	r1, r24
     fb4:	09 06       	cpc	r0, r25
     fb6:	08 95       	ret

00000fb8 <__fp_pscB>:
     fb8:	00 24       	eor	r0, r0
     fba:	0a 94       	dec	r0
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	14 06       	cpc	r1, r20
     fc2:	05 06       	cpc	r0, r21
     fc4:	08 95       	ret

00000fc6 <__fp_round>:
     fc6:	09 2e       	mov	r0, r25
     fc8:	03 94       	inc	r0
     fca:	00 0c       	add	r0, r0
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <__fp_round+0xc>
     fce:	88 23       	and	r24, r24
     fd0:	52 f0       	brmi	.+20     	; 0xfe6 <__fp_round+0x20>
     fd2:	bb 0f       	add	r27, r27
     fd4:	40 f4       	brcc	.+16     	; 0xfe6 <__fp_round+0x20>
     fd6:	bf 2b       	or	r27, r31
     fd8:	11 f4       	brne	.+4      	; 0xfde <__fp_round+0x18>
     fda:	60 ff       	sbrs	r22, 0
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <__fp_round+0x20>
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__fp_split3>:
     fe8:	57 fd       	sbrc	r21, 7
     fea:	90 58       	subi	r25, 0x80	; 128
     fec:	44 0f       	add	r20, r20
     fee:	55 1f       	adc	r21, r21
     ff0:	59 f0       	breq	.+22     	; 0x1008 <__fp_splitA+0x10>
     ff2:	5f 3f       	cpi	r21, 0xFF	; 255
     ff4:	71 f0       	breq	.+28     	; 0x1012 <__fp_splitA+0x1a>
     ff6:	47 95       	ror	r20

00000ff8 <__fp_splitA>:
     ff8:	88 0f       	add	r24, r24
     ffa:	97 fb       	bst	r25, 7
     ffc:	99 1f       	adc	r25, r25
     ffe:	61 f0       	breq	.+24     	; 0x1018 <__fp_splitA+0x20>
    1000:	9f 3f       	cpi	r25, 0xFF	; 255
    1002:	79 f0       	breq	.+30     	; 0x1022 <__fp_splitA+0x2a>
    1004:	87 95       	ror	r24
    1006:	08 95       	ret
    1008:	12 16       	cp	r1, r18
    100a:	13 06       	cpc	r1, r19
    100c:	14 06       	cpc	r1, r20
    100e:	55 1f       	adc	r21, r21
    1010:	f2 cf       	rjmp	.-28     	; 0xff6 <__fp_split3+0xe>
    1012:	46 95       	lsr	r20
    1014:	f1 df       	rcall	.-30     	; 0xff8 <__fp_splitA>
    1016:	08 c0       	rjmp	.+16     	; 0x1028 <__fp_splitA+0x30>
    1018:	16 16       	cp	r1, r22
    101a:	17 06       	cpc	r1, r23
    101c:	18 06       	cpc	r1, r24
    101e:	99 1f       	adc	r25, r25
    1020:	f1 cf       	rjmp	.-30     	; 0x1004 <__fp_splitA+0xc>
    1022:	86 95       	lsr	r24
    1024:	71 05       	cpc	r23, r1
    1026:	61 05       	cpc	r22, r1
    1028:	08 94       	sec
    102a:	08 95       	ret

0000102c <__fp_trunc>:
    102c:	e5 df       	rcall	.-54     	; 0xff8 <__fp_splitA>
    102e:	a0 f0       	brcs	.+40     	; 0x1058 <__fp_trunc+0x2c>
    1030:	be e7       	ldi	r27, 0x7E	; 126
    1032:	b9 17       	cp	r27, r25
    1034:	88 f4       	brcc	.+34     	; 0x1058 <__fp_trunc+0x2c>
    1036:	bb 27       	eor	r27, r27
    1038:	9f 38       	cpi	r25, 0x8F	; 143
    103a:	60 f4       	brcc	.+24     	; 0x1054 <__fp_trunc+0x28>
    103c:	16 16       	cp	r1, r22
    103e:	b1 1d       	adc	r27, r1
    1040:	67 2f       	mov	r22, r23
    1042:	78 2f       	mov	r23, r24
    1044:	88 27       	eor	r24, r24
    1046:	98 5f       	subi	r25, 0xF8	; 248
    1048:	f7 cf       	rjmp	.-18     	; 0x1038 <__fp_trunc+0xc>
    104a:	86 95       	lsr	r24
    104c:	77 95       	ror	r23
    104e:	67 95       	ror	r22
    1050:	b1 1d       	adc	r27, r1
    1052:	93 95       	inc	r25
    1054:	96 39       	cpi	r25, 0x96	; 150
    1056:	c8 f3       	brcs	.-14     	; 0x104a <__fp_trunc+0x1e>
    1058:	08 95       	ret

0000105a <__fp_zero>:
    105a:	e8 94       	clt

0000105c <__fp_szero>:
    105c:	bb 27       	eor	r27, r27
    105e:	66 27       	eor	r22, r22
    1060:	77 27       	eor	r23, r23
    1062:	cb 01       	movw	r24, r22
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret

00001068 <inverse>:
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	9f e3       	ldi	r25, 0x3F	; 63
    1074:	6d ce       	rjmp	.-806    	; 0xd50 <__divsf3>

00001076 <__mulsf3>:
    1076:	0b d0       	rcall	.+22     	; 0x108e <__mulsf3x>
    1078:	a6 cf       	rjmp	.-180    	; 0xfc6 <__fp_round>
    107a:	97 df       	rcall	.-210    	; 0xfaa <__fp_pscA>
    107c:	28 f0       	brcs	.+10     	; 0x1088 <__mulsf3+0x12>
    107e:	9c df       	rcall	.-200    	; 0xfb8 <__fp_pscB>
    1080:	18 f0       	brcs	.+6      	; 0x1088 <__mulsf3+0x12>
    1082:	95 23       	and	r25, r21
    1084:	09 f0       	breq	.+2      	; 0x1088 <__mulsf3+0x12>
    1086:	3a cf       	rjmp	.-396    	; 0xefc <__fp_inf>
    1088:	68 cf       	rjmp	.-304    	; 0xf5a <__fp_nan>
    108a:	11 24       	eor	r1, r1
    108c:	e7 cf       	rjmp	.-50     	; 0x105c <__fp_szero>

0000108e <__mulsf3x>:
    108e:	ac df       	rcall	.-168    	; 0xfe8 <__fp_split3>
    1090:	a0 f3       	brcs	.-24     	; 0x107a <__mulsf3+0x4>

00001092 <__mulsf3_pse>:
    1092:	95 9f       	mul	r25, r21
    1094:	d1 f3       	breq	.-12     	; 0x108a <__mulsf3+0x14>
    1096:	95 0f       	add	r25, r21
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	55 1f       	adc	r21, r21
    109c:	62 9f       	mul	r22, r18
    109e:	f0 01       	movw	r30, r0
    10a0:	72 9f       	mul	r23, r18
    10a2:	bb 27       	eor	r27, r27
    10a4:	f0 0d       	add	r31, r0
    10a6:	b1 1d       	adc	r27, r1
    10a8:	63 9f       	mul	r22, r19
    10aa:	aa 27       	eor	r26, r26
    10ac:	f0 0d       	add	r31, r0
    10ae:	b1 1d       	adc	r27, r1
    10b0:	aa 1f       	adc	r26, r26
    10b2:	64 9f       	mul	r22, r20
    10b4:	66 27       	eor	r22, r22
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	66 1f       	adc	r22, r22
    10bc:	82 9f       	mul	r24, r18
    10be:	22 27       	eor	r18, r18
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	62 1f       	adc	r22, r18
    10c6:	73 9f       	mul	r23, r19
    10c8:	b0 0d       	add	r27, r0
    10ca:	a1 1d       	adc	r26, r1
    10cc:	62 1f       	adc	r22, r18
    10ce:	83 9f       	mul	r24, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	22 1f       	adc	r18, r18
    10d6:	74 9f       	mul	r23, r20
    10d8:	33 27       	eor	r19, r19
    10da:	a0 0d       	add	r26, r0
    10dc:	61 1d       	adc	r22, r1
    10de:	23 1f       	adc	r18, r19
    10e0:	84 9f       	mul	r24, r20
    10e2:	60 0d       	add	r22, r0
    10e4:	21 1d       	adc	r18, r1
    10e6:	82 2f       	mov	r24, r18
    10e8:	76 2f       	mov	r23, r22
    10ea:	6a 2f       	mov	r22, r26
    10ec:	11 24       	eor	r1, r1
    10ee:	9f 57       	subi	r25, 0x7F	; 127
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	8a f0       	brmi	.+34     	; 0x1116 <__stack+0x17>
    10f4:	e1 f0       	breq	.+56     	; 0x112e <__stack+0x2f>
    10f6:	88 23       	and	r24, r24
    10f8:	4a f0       	brmi	.+18     	; 0x110c <__stack+0xd>
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	a9 f7       	brne	.-22     	; 0x10f6 <__mulsf3_pse+0x64>
    110c:	9e 3f       	cpi	r25, 0xFE	; 254
    110e:	51 05       	cpc	r21, r1
    1110:	70 f0       	brcs	.+28     	; 0x112e <__stack+0x2f>
    1112:	f4 ce       	rjmp	.-536    	; 0xefc <__fp_inf>
    1114:	a3 cf       	rjmp	.-186    	; 0x105c <__fp_szero>
    1116:	5f 3f       	cpi	r21, 0xFF	; 255
    1118:	ec f3       	brlt	.-6      	; 0x1114 <__stack+0x15>
    111a:	98 3e       	cpi	r25, 0xE8	; 232
    111c:	dc f3       	brlt	.-10     	; 0x1114 <__stack+0x15>
    111e:	86 95       	lsr	r24
    1120:	77 95       	ror	r23
    1122:	67 95       	ror	r22
    1124:	b7 95       	ror	r27
    1126:	f7 95       	ror	r31
    1128:	e7 95       	ror	r30
    112a:	9f 5f       	subi	r25, 0xFF	; 255
    112c:	c1 f7       	brne	.-16     	; 0x111e <__stack+0x1f>
    112e:	fe 2b       	or	r31, r30
    1130:	88 0f       	add	r24, r24
    1132:	91 1d       	adc	r25, r1
    1134:	96 95       	lsr	r25
    1136:	87 95       	ror	r24
    1138:	97 f9       	bld	r25, 7
    113a:	08 95       	ret

0000113c <square>:
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	9a cf       	rjmp	.-204    	; 0x1076 <__mulsf3>

00001142 <atoi>:
    1142:	fc 01       	movw	r30, r24
    1144:	88 27       	eor	r24, r24
    1146:	99 27       	eor	r25, r25
    1148:	e8 94       	clt
    114a:	21 91       	ld	r18, Z+
    114c:	20 32       	cpi	r18, 0x20	; 32
    114e:	e9 f3       	breq	.-6      	; 0x114a <atoi+0x8>
    1150:	29 30       	cpi	r18, 0x09	; 9
    1152:	10 f0       	brcs	.+4      	; 0x1158 <atoi+0x16>
    1154:	2e 30       	cpi	r18, 0x0E	; 14
    1156:	c8 f3       	brcs	.-14     	; 0x114a <atoi+0x8>
    1158:	2b 32       	cpi	r18, 0x2B	; 43
    115a:	39 f0       	breq	.+14     	; 0x116a <atoi+0x28>
    115c:	2d 32       	cpi	r18, 0x2D	; 45
    115e:	31 f4       	brne	.+12     	; 0x116c <atoi+0x2a>
    1160:	68 94       	set
    1162:	03 c0       	rjmp	.+6      	; 0x116a <atoi+0x28>
    1164:	0b d0       	rcall	.+22     	; 0x117c <__mulhi_const_10>
    1166:	82 0f       	add	r24, r18
    1168:	91 1d       	adc	r25, r1
    116a:	21 91       	ld	r18, Z+
    116c:	20 53       	subi	r18, 0x30	; 48
    116e:	2a 30       	cpi	r18, 0x0A	; 10
    1170:	c8 f3       	brcs	.-14     	; 0x1164 <atoi+0x22>
    1172:	1e f4       	brtc	.+6      	; 0x117a <atoi+0x38>
    1174:	90 95       	com	r25
    1176:	81 95       	neg	r24
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	08 95       	ret

0000117c <__mulhi_const_10>:
    117c:	7a e0       	ldi	r23, 0x0A	; 10
    117e:	97 9f       	mul	r25, r23
    1180:	90 2d       	mov	r25, r0
    1182:	87 9f       	mul	r24, r23
    1184:	80 2d       	mov	r24, r0
    1186:	91 0d       	add	r25, r1
    1188:	11 24       	eor	r1, r1
    118a:	08 95       	ret

0000118c <_exit>:
    118c:	f8 94       	cli

0000118e <__stop_program>:
    118e:	ff cf       	rjmp	.-2      	; 0x118e <__stop_program>
